// Autor: Alexander Echeverria
// src/services/paymentService.js
// FUNCI√ìN: Servicio especializado para gesti√≥n de pagos del gimnasio guatemalteco
// USO: Interfaz entre componentes React y API backend para transacciones en quetzales
// VERSI√ìN: Completa con m√©todos separados por tipo de pago + Sincronizaci√≥n con backend

import { BaseService } from './baseService.js';

// ================================
// üè¶ CLASE PRINCIPAL DEL SERVICIO DE PAGOS
// ================================
class PaymentService extends BaseService {
  constructor() {
    super();
    this.cache = new Map();
    this.cacheTimeout = 30000; // 30 segundos
  }

  // ================================
  // üí∞ M√âTODOS DE HISTORIAL DE PAGOS GENERAL (MANTENER FUNCIONALIDAD ACTUAL)
  // ================================

  /**
   * Obtener historial de pagos con filtros y paginaci√≥n - MEJORADO
   * @param {Object} params - Par√°metros de filtro
   * @param {number} params.page - P√°gina actual (default: 1)
   * @param {number} params.limit - Registros por p√°gina (default: 20)
   * @param {string} params.search - T√©rmino de b√∫squeda por cliente
   * @param {string} params.status - Filtro por estado (completed, pending, failed, cancelled)
   * @param {string} params.paymentMethod - Filtro por m√©todo (cash, card, transfer, mobile)
   * @param {string} params.paymentType - Filtro por tipo (membership, daily, bulk_daily)
   * @param {string} params.startDate - Fecha de inicio (YYYY-MM-DD)
   * @param {string} params.endDate - Fecha de fin (YYYY-MM-DD)
   * @param {boolean} params.includeAll - Incluir todos los estados (default: false)
   * @returns {Promise<Object>} Lista de pagos con paginaci√≥n
   */
  async getPayments(params = {}) {
    try {
      console.log('üí∞ PaymentService: Obteniendo historial de pagos...', params);
      
      // Preparar par√°metros con valores por defecto
      const queryParams = {
        page: params.page || 1,
        limit: params.limit || 20,
        search: params.search?.trim() || undefined,
        status: params.status || undefined,
        paymentMethod: params.paymentMethod || undefined,
        paymentType: params.paymentType || undefined,
        startDate: params.startDate || undefined,
        endDate: params.endDate || undefined,
        includeAll: params.includeAll || true,
        sortBy: params.sortBy || 'paymentDate',
        sortOrder: params.sortOrder || 'desc'
      };

      // Limpiar par√°metros undefined
      Object.keys(queryParams).forEach(key => {
        if (queryParams[key] === undefined) {
          delete queryParams[key];
        }
      });

      const response = await this.get('/api/payments', { params: queryParams });
      
      console.log(`‚úÖ PaymentService: ${response.data?.payments?.length || response.data?.length || 0} pagos obtenidos`);
      
      // Normalizar respuesta para diferentes formatos del backend
      if (response.data) {
        if (response.data.success) {
          // Backend con estructura { success: true, data: {...} }
          return {
            success: true,
            data: {
              payments: response.data.data?.payments || response.data.data || [],
              pagination: response.data.data?.pagination || {
                total: response.data.data?.payments?.length || 0,
                page: queryParams.page,
                pages: Math.ceil((response.data.data?.payments?.length || 0) / queryParams.limit),
                limit: queryParams.limit
              }
            }
          };
        } else if (response.data.payments && Array.isArray(response.data.payments)) {
          // Formato con paginaci√≥n directa
          return {
            success: true,
            data: {
              payments: response.data.payments,
              pagination: response.data.pagination || {
                total: response.data.payments.length,
                page: queryParams.page,
                pages: Math.ceil(response.data.payments.length / queryParams.limit),
                limit: queryParams.limit
              }
            }
          };
        } else if (Array.isArray(response.data)) {
          // Formato de array directo
          const total = response.data.length;
          const page = queryParams.page;
          const limit = queryParams.limit;
          const startIndex = (page - 1) * limit;
          const endIndex = startIndex + limit;
          
          return {
            success: true,
            data: {
              payments: response.data.slice(startIndex, endIndex),
              pagination: {
                total: total,
                page: page,
                pages: Math.ceil(total / limit),
                limit: limit
              }
            }
          };
        }
      }
      
      return response;
      
    } catch (error) {
      console.error('‚ùå PaymentService: Error obteniendo pagos:', error);
      throw this.handleError(error, 'Error al obtener historial de pagos');
    }
  }


  /**
   * Obtener pago espec√≠fico por ID
   * @param {string} paymentId - ID del pago
   * @returns {Promise<Object>} Detalles completos del pago
   */
  async getPaymentById(paymentId) {
    try {
      console.log('üîç PaymentService: Obteniendo pago por ID:', paymentId);
      
      const response = await this.get(`/api/payments/${paymentId}`);
      
      console.log('‚úÖ PaymentService: Pago obtenido exitosamente');
      return response;
      
    } catch (error) {
      console.error('‚ùå PaymentService: Error obteniendo pago:', error);
      throw this.handleError(error, 'Error al obtener detalles del pago');
    }
  }

  /**
   * Buscar pagos por cliente (b√∫squeda r√°pida)
   * @param {string} searchTerm - T√©rmino de b√∫squeda
   * @param {number} limit - L√≠mite de resultados (default: 10)
   * @returns {Promise<Object>} Resultados de b√∫squeda
   */
  async searchPayments(searchTerm, limit = 10) {
    try {
      console.log('üîç PaymentService: Buscando pagos:', searchTerm);
      
      const response = await this.get('/api/payments/search', {
        params: {
          q: searchTerm.trim(),
          limit: limit
        }
      });
      
      console.log(`‚úÖ PaymentService: ${response.data?.length || 0} resultados encontrados`);
      return response;
      
    } catch (error) {
      console.error('‚ùå PaymentService: Error en b√∫squeda:', error);
      throw this.handleError(error, 'Error al buscar pagos');
    }
  }

  // ================================
  // üìä M√âTODOS DE ESTAD√çSTICAS GENERALES (MEJORADO)
  // ================================

  /**
   * Obtener estad√≠sticas generales de pagos - MEJORADO con manejo de respuestas del backend
   * @param {Object} dateRange - Rango de fechas opcional
   * @param {string} dateRange.startDate - Fecha de inicio
   * @param {string} dateRange.endDate - Fecha de fin
   * @returns {Promise<Object>} Estad√≠sticas de pagos
   */
  async getPaymentStatistics(dateRange = {}) {
    try {
      console.log('üìä PaymentService: Obteniendo estad√≠sticas de pagos...');
      
      const params = {};
      if (dateRange.startDate) params.startDate = dateRange.startDate;
      if (dateRange.endDate) params.endDate = dateRange.endDate;
      
      const response = await this.get('/api/payments/statistics', { params });
      
      // Manejar diferentes formatos de respuesta del backend
      if (response?.data) {
        if (response.data.success) {
          console.log('‚úÖ PaymentService: Estad√≠sticas obtenidas exitosamente');
          return {
            success: true,
            data: response.data.data || response.data
          };
        } else {
          return {
            success: true,
            data: response.data
          };
        }
      }
      
      console.log('‚úÖ PaymentService: Estad√≠sticas obtenidas exitosamente');
      return response;
      
    } catch (error) {
      console.error('‚ùå PaymentService: Error obteniendo estad√≠sticas:', error);
      // Fallback con estructura b√°sica
      return {
        success: true,
        data: {
          totalIncome: 0,
          totalPayments: 0,
          averagePayment: 0,
          completedPayments: 0,
          pendingPayments: 0,
          failedPayments: 0,
          incomeByMethod: [],
          dailyIncome: []
        }
      };
    }
  }

  // Agregar estos m√©todos al PaymentService existente:

async cancelCashMembership(membershipId, cancellationData = {}) {
  try {
    // Intentar endpoint espec√≠fico
    const response = await this.post('/api/payments/cancel-cash-membership', {
      membershipId,
      reason: cancellationData.reason || 'Cliente no lleg√≥ a realizar el pago',
      notes: cancellationData.notes || 'Membres√≠a cancelada por falta de pago'
    });
    
    this.invalidatePaymentCache();
    return response;
    
  } catch (error) {
    // Fallback a m√©todo gen√©rico
    return await this.cancelCashPayment(membershipId, cancellationData);
  }
}

async updatePaymentStatus(paymentId, newStatus, updateData = {}) {
  const response = await this.patch(`/api/payments/${paymentId}/status`, {
    status: newStatus,
    reason: updateData.reason || `Estado cambiado a ${newStatus}`,
    notes: updateData.notes || ''
  });
  
  this.invalidatePaymentCache();
  return response;
}
  // ================================
  // üéØ M√âTODOS DE DASHBOARD PENDIENTES GENERAL (MEJORADO)
  // ================================

  /**
   * Obtener dashboard de pagos pendientes - MEJORADO para sincronizar con el test
   * @returns {Promise<Object>} Dashboard con resumen de pendientes
   */
  async getPendingPaymentsDashboard() {
    try {
      console.log('üéØ PaymentService: Obteniendo dashboard de pendientes...');
      
      const response = await this.get('/api/payments/pending-dashboard');
      
      // Manejar diferentes formatos de respuesta del backend
      if (response?.data) {
        if (response.data.success) {
          console.log('‚úÖ PaymentService: Dashboard de pendientes obtenido');
          return {
            success: true,
            data: response.data.data || response.data
          };
        } else {
          return {
            success: true,
            data: response.data
          };
        }
      }
      
      console.log('‚úÖ PaymentService: Dashboard de pendientes obtenido');
      return response;
      
    } catch (error) {
      console.error('‚ùå PaymentService: Error obteniendo dashboard:', error);
      // Fallback con estructura b√°sica
      return {
        success: true,
        data: {
          summary: {
            pendingTransfers: { count: 0, totalAmount: 0, oldestHours: 0 },
            pendingCashPayments: { count: 0, totalAmount: 0, oldestHours: 0 },
            pendingCardPayments: { count: 0, totalAmount: 0, oldestHours: 0 },
            totalPendingActions: 0
          },
          urgentItems: [],
          recentActivity: []
        }
      };
    }
  }

  // ================================
  // üíµ M√âTODOS ESPEC√çFICOS PARA EFECTIVO (MEJORADO PARA SINCRONIZACI√ìN)
  // ================================

  /**
   * Obtener SOLO pagos en efectivo pendientes - MEJORADO para el test
   * @param {Object} params - Par√°metros de filtro
   * @returns {Promise<Object>} Lista de pagos en efectivo pendientes
   */
  async getPendingCashPayments(params = {}) {
    try {
      console.log('üíµ PaymentService: Obteniendo SOLO pagos en EFECTIVO pendientes...', params);
      
      const queryParams = {
        paymentMethod: 'cash', // FORZAR solo efectivo
        status: 'pending',     // FORZAR solo pendientes
        search: params.search?.trim() || undefined,
        sortBy: params.sortBy || 'waiting_time',
        priority: params.priority === 'all' ? undefined : params.priority
      };

      // Limpiar par√°metros undefined
      Object.keys(queryParams).forEach(key => {
        if (queryParams[key] === undefined) {
          delete queryParams[key];
        }
      });
      
      const response = await this.get('/api/payments/cash/pending', { params: queryParams });
      
      // Manejar respuesta del backend como en el test
      if (response?.data) {
        if (response.data.success) {
          const payments = response.data.data?.payments || [];
          const summary = response.data.data?.summary || {};
          
          console.log(`‚úÖ PaymentService: ${payments.length} pagos en EFECTIVO pendientes`);
          
          return {
            success: true,
            data: {
              payments: payments,
              summary: {
                totalAmount: summary.totalAmount || 0,
                count: payments.length,
                urgent: payments.filter(p => (p.hoursWaiting || 0) > 4).length,
                avgHours: payments.length > 0 ? 
                  payments.reduce((sum, p) => sum + (p.hoursWaiting || 0), 0) / payments.length : 0,
                avgAmount: summary.totalAmount && payments.length > 0 ? 
                  summary.totalAmount / payments.length : 0,
                total: payments.length
              }
            }
          };
        } else {
          return {
            success: true,
            data: {
              payments: response.data.payments || [],
              summary: response.data.summary || { totalAmount: 0, count: 0 }
            }
          };
        }
      }
      
      return response;
      
    } catch (error) {
      console.error('‚ùå PaymentService: Error obteniendo pagos en efectivo:', error);
      return {
        success: true,
        data: {
          payments: [],
          summary: { 
            totalAmount: 0, 
            count: 0, 
            urgent: 0,
            avgHours: 0,
            avgAmount: 0,
            total: 0
          }
        }
      };
    }
  }

  /**
   * Obtener estad√≠sticas espec√≠ficas de pagos en efectivo
   * @returns {Promise<Object>} Estad√≠sticas de efectivo
   */
  async getCashPaymentStats() {
    try {
      console.log('üìä PaymentService: Obteniendo estad√≠sticas de EFECTIVO...');
      
      const response = await this.get('/api/payments/cash/stats');
      
      console.log('‚úÖ PaymentService: Estad√≠sticas de efectivo obtenidas');
      return response;
      
    } catch (error) {
      console.error('‚ùå PaymentService: Error obteniendo estad√≠sticas de efectivo:', error);
      return {
        success: true,
        data: {
          total: 0,
          urgent: 0,
          totalAmount: 0,
          avgAmount: 0,
          avgHours: 0
        }
      };
    }
  }

  /**
   * Confirmar pago en efectivo recibido f√≠sicamente
   * @param {string} paymentId - ID del pago
   * @param {Object} confirmationData - Datos de confirmaci√≥n
   * @returns {Promise<Object>} Resultado de la confirmaci√≥n
   */
  async confirmCashPayment(paymentId, confirmationData = {}) {
    try {
      console.log('üíµ PaymentService: Confirmando pago en EFECTIVO:', paymentId);
      
      const response = await this.post(`/api/payments/${paymentId}/confirm-cash`, {
        notes: confirmationData.notes?.trim() || 'Pago en efectivo recibido',
        receivedAmount: confirmationData.receivedAmount || undefined,
        confirmedBy: confirmationData.confirmedBy || undefined
      });
      
      console.log('‚úÖ PaymentService: Pago en EFECTIVO confirmado exitosamente');
      
      // Invalidar cache
      this.invalidatePaymentCache();
      
      return response;
      
    } catch (error) {
      console.error('‚ùå PaymentService: Error confirmando pago en efectivo:', error);
      throw this.handleError(error, 'Error al confirmar pago en efectivo');
    }
  }

  /**
   * Cancelar/anular pago en efectivo
   * @param {string} paymentId - ID del pago
   * @param {Object} cancellationData - Datos de cancelaci√≥n
   * @returns {Promise<Object>} Resultado de la cancelaci√≥n
   */
  async cancelCashPayment(paymentId, cancellationData = {}) {
    try {
      console.log('‚ùå PaymentService: Cancelando pago en EFECTIVO:', paymentId);
      
      const response = await this.post(`/api/payments/${paymentId}/cancel-cash`, {
        reason: cancellationData.reason?.trim() || 'Cancelado por administrador',
        notes: cancellationData.notes?.trim() || ''
      });
      
      console.log('‚úÖ PaymentService: Pago en EFECTIVO cancelado exitosamente');
      
      // Invalidar cache
      this.invalidatePaymentCache();
      
      return response;
      
    } catch (error) {
      console.error('‚ùå PaymentService: Error cancelando pago en efectivo:', error);
      throw this.handleError(error, 'Error al cancelar pago en efectivo');
    }
  }

  // ================================
  // üè¶ M√âTODOS ESPEC√çFICOS PARA TRANSFERENCIAS (MEJORADO PARA SINCRONIZACI√ìN)
  // ================================

    /**
     * Obtener SOLO transferencias pendientes - MEJORADO para asegurar hoursWaiting
     * @param {Object} params - Par√°metros de filtro
     * @returns {Promise<Object>} Lista de transferencias pendientes
     */
    async getPendingTransfers(params = {}) {
      try {
        console.log('üè¶ PaymentService: Obteniendo SOLO TRANSFERENCIAS pendientes...');
        
        const queryParams = {
          paymentMethod: 'transfer', // FORZAR solo transferencias
          status: 'pending',         // FORZAR solo pendientes
          search: params.search?.trim() || undefined,
          sortBy: params.sortBy || 'waiting_time',
          priority: params.priority === 'all' ? undefined : params.priority,
          includeWaitingTime: true   // NUEVO: Solicitar c√°lculo de tiempo de espera
        };

        // Limpiar par√°metros undefined
        Object.keys(queryParams).forEach(key => {
          if (queryParams[key] === undefined) {
            delete queryParams[key];
          }
        });
        
        const response = await this.get('/api/payments/transfers/pending', { params: queryParams });
        
        // MEJORADO: Procesar respuesta y asegurar campo hoursWaiting
        if (response?.data) {
          if (response.data.success) {
            const transfers = response.data.data?.transfers || [];
            
            // NUEVO: Procesar cada transferencia para asegurar hoursWaiting
            const processedTransfers = transfers.map(transfer => {
              let hoursWaiting = transfer.hoursWaiting || 0;
              
              // Si no viene calculado del backend, calcularlo en el frontend
              if (!hoursWaiting || hoursWaiting === 0) {
                const transferDate = new Date(transfer.paymentDate || transfer.createdAt);
                const now = new Date();
                const diffTime = now - transferDate;
                hoursWaiting = Math.max(0, diffTime / (1000 * 60 * 60)); // Convertir a horas
              }
              
              return {
                ...transfer,
                hoursWaiting: hoursWaiting,
                // Asegurar otros campos cr√≠ticos
                amount: parseFloat(transfer.amount || 0),
                paymentDate: transfer.paymentDate || transfer.createdAt,
                user: transfer.user || {
                  name: transfer.clientName || 'Cliente An√≥nimo',
                  email: transfer.clientEmail || '',
                  phone: transfer.clientPhone || ''
                }
              };
            });
            
            console.log(`‚úÖ PaymentService: ${processedTransfers.length} TRANSFERENCIAS pendientes procesadas`);
            
            // Log de debug para verificar tiempos de espera
            if (processedTransfers.length > 0) {
              const avgHours = processedTransfers.reduce((sum, t) => sum + t.hoursWaiting, 0) / processedTransfers.length;
              const maxHours = Math.max(...processedTransfers.map(t => t.hoursWaiting));
              console.log(`‚è±Ô∏è Tiempos de espera - Promedio: ${avgHours.toFixed(1)}h, M√°ximo: ${maxHours.toFixed(1)}h`);
            }
            
            return {
              success: true,
              data: {
                transfers: processedTransfers,
                summary: {
                  totalAmount: processedTransfers.reduce((sum, t) => sum + (t.amount || 0), 0),
                  count: processedTransfers.length,
                  avgHours: processedTransfers.length > 0 ? 
                    processedTransfers.reduce((sum, t) => sum + t.hoursWaiting, 0) / processedTransfers.length : 0,
                  critical: processedTransfers.filter(t => t.hoursWaiting > 24).length,
                  high: processedTransfers.filter(t => t.hoursWaiting > 12 && t.hoursWaiting <= 24).length,
                  medium: processedTransfers.filter(t => t.hoursWaiting > 4 && t.hoursWaiting <= 12).length,
                  normal: processedTransfers.filter(t => t.hoursWaiting <= 4).length
                }
              }
            };
          } else {
            return {
              success: true,
              data: {
                transfers: response.data.transfers || [],
                summary: response.data.summary || { totalAmount: 0, count: 0 }
              }
            };
          }
        }
        
        return response;
        
      } catch (error) {
        console.error('‚ùå PaymentService: Error obteniendo transferencias:', error);
        return {
          success: true,
          data: {
            transfers: [],
            summary: { 
              totalAmount: 0, 
              count: 0,
              avgHours: 0,
              critical: 0,
              high: 0,
              medium: 0,
              normal: 0
            }
          }
        };
      }
    }

  /**
   * Obtener transferencias pendientes con detalles completos
   * @param {number} urgentHours - Horas para considerar urgente (default: 72)
   * @returns {Promise<Object>} Lista detallada de transferencias
   */
  async getPendingTransfersDetailed(urgentHours = 72) {
    try {
      console.log('üè¶ PaymentService: Obteniendo transferencias detalladas...');
      
      const response = await this.get('/api/payments/transfers/pending-detailed', {
        params: { urgentHours }
      });
      
      console.log(`‚úÖ PaymentService: Transferencias detalladas obtenidas`);
      return response;
      
    } catch (error) {
      console.error('‚ùå PaymentService: Error obteniendo transferencias detalladas:', error);
      return this.getPendingTransfers(); // Fallback a b√°sicas
    }
  }

  /**
   * Validar transferencia (aprobar o rechazar)
   * @param {string} paymentId - ID del pago
   * @param {boolean} approved - true para aprobar, false para rechazar
   * @param {string} notes - Notas de validaci√≥n
   * @returns {Promise<Object>} Resultado de la validaci√≥n
   */
  async validateTransfer(paymentId, approved, notes = '') {
    try {
      console.log(`${approved ? '‚úÖ' : '‚ùå'} PaymentService: Validando transferencia:`, paymentId);
      
      const response = await this.post(`/api/payments/${paymentId}/validate-transfer`, {
        approved,
        notes: notes.trim()
      });
      
      console.log(`‚úÖ PaymentService: Transferencia ${approved ? 'aprobada' : 'rechazada'}`);
      
      // Invalidar cache relacionado
      this.invalidatePaymentCache();
      
      return response;
      
    } catch (error) {
      console.error('‚ùå PaymentService: Error validando transferencia:', error);
      throw this.handleError(error, `Error al ${approved ? 'aprobar' : 'rechazar'} transferencia`);
    }
  }

  /**
   * Rechazar transferencia con raz√≥n espec√≠fica
   * @param {string} paymentId - ID del pago
   * @param {string} reason - Raz√≥n del rechazo
   * @returns {Promise<Object>} Resultado del rechazo
   */
  async rejectTransfer(paymentId, reason) {
    try {
      console.log('‚ùå PaymentService: Rechazando transferencia:', paymentId);
      
      const response = await this.post(`/api/payments/${paymentId}/reject-transfer`, {
        reason: reason.trim()
      });
      
      console.log('‚úÖ PaymentService: Transferencia rechazada');
      
      // Invalidar cache
      this.invalidatePaymentCache();
      
      return response;
      
    } catch (error) {
      console.error('‚ùå PaymentService: Error rechazando transferencia:', error);
      throw this.handleError(error, 'Error al rechazar transferencia');
    }
  }

  // ================================
  // üí≥ M√âTODOS ESPEC√çFICOS PARA TARJETAS (MEJORADO PARA SINCRONIZACI√ìN)
  // ================================

  /**
   * Obtener SOLO pagos con tarjeta - NUEVO m√©todo para sincronizar con el test
   * @param {Object} params - Par√°metros de filtro
   * @returns {Promise<Object>} Lista de pagos con tarjeta
   */
  async getCardPayments(params = {}) {
    try {
      console.log('üí≥ PaymentService: Obteniendo pagos con TARJETA...', params);
      
      const queryParams = {
        paymentMethod: 'card',
        limit: params.limit || 50,
        page: params.page || 1,
        includeAll: 'true',
        search: params.search?.trim() || undefined,
        status: params.status || undefined
      };

      Object.keys(queryParams).forEach(key => {
        if (queryParams[key] === undefined) {
          delete queryParams[key];
        }
      });
      
      const response = await this.get('/api/payments', { params: queryParams });
      
      // Manejar respuesta del backend como en el test
      if (response?.data) {
        if (response.data.success) {
          const payments = response.data.data?.payments || [];
          
          console.log(`‚úÖ PaymentService: ${payments.length} pagos con TARJETA obtenidos`);
          
          return {
            success: true,
            data: {
              payments: payments
            }
          };
        } else if (response.data.payments) {
          return {
            success: true,
            data: {
              payments: response.data.payments
            }
          };
        }
      }
      
      return response;
      
    } catch (error) {
      console.error('‚ùå PaymentService: Error obteniendo pagos con tarjeta:', error);
      return {
        success: true,
        data: { payments: [] }
      };
    }
  }

  /**
   * Obtener SOLO pagos con tarjeta pendientes
   * @param {Object} params - Par√°metros de filtro
   * @returns {Promise<Object>} Lista de pagos con tarjeta pendientes
   */
  async getPendingCardPayments(params = {}) {
    try {
      console.log('üí≥ PaymentService: Obteniendo SOLO pagos con TARJETA pendientes...', params);
      
      const queryParams = {
        paymentMethod: 'card',     // FORZAR solo tarjetas
        status: 'pending',         // FORZAR solo pendientes
        search: params.search?.trim() || undefined,
        sortBy: params.sortBy || 'waiting_time',
        priority: params.priority === 'all' ? undefined : params.priority
      };

      // Limpiar par√°metros undefined
      Object.keys(queryParams).forEach(key => {
        if (queryParams[key] === undefined) {
          delete queryParams[key];
        }
      });
      
      const response = await this.get('/api/payments/card/pending', { params: queryParams });
      
      console.log(`‚úÖ PaymentService: ${response.data?.payments?.length || 0} pagos con TARJETA pendientes`);
      return response;
      
    } catch (error) {
      console.error('‚ùå PaymentService: Error obteniendo pagos con tarjeta:', error);
      return {
        success: true,
        data: {
          payments: [],
          summary: { 
            totalAmount: 0, 
            count: 0, 
            urgent: 0,
            avgHours: 0,
            avgAmount: 0,
            total: 0
          }
        }
      };
    }
  }

  /**
   * Obtener pagos espec√≠ficos de Stripe - NUEVO m√©todo para el test
   * @param {Object} params - Par√°metros de filtro
   * @returns {Promise<Object>} Lista de pagos de Stripe
   */
  async getStripePayments(params = {}) {
    try {
      console.log('üåü PaymentService: Obteniendo pagos de STRIPE...', params);
      
      const queryParams = {
        limit: params.limit || 30
      };
      
      const response = await this.get('/api/stripe/payments', { params: queryParams });
      
      // Manejar respuesta del backend como en el test
      if (response?.data) {
        if (response.data.success) {
          const payments = response.data.data?.payments || [];
          
          console.log(`‚úÖ PaymentService: ${payments.length} pagos de STRIPE obtenidos`);
          
          return {
            success: true,
            data: {
              payments: payments
            }
          };
        } else {
          return {
            success: true,
            data: {
              payments: response.data.payments || []
            }
          };
        }
      }
      
      return response;
      
    } catch (error) {
      console.error('‚ùå PaymentService: Error obteniendo pagos de Stripe:', error);
      return {
        success: true,
        data: { payments: [] }
      };
    }
  }

  /**
   * Obtener estad√≠sticas espec√≠ficas de pagos con tarjeta
   * @returns {Promise<Object>} Estad√≠sticas de tarjeta
   */
  async getCardPaymentStats() {
    try {
      console.log('üìä PaymentService: Obteniendo estad√≠sticas de TARJETA...');
      
      const response = await this.get('/api/payments/card/stats');
      
      console.log('‚úÖ PaymentService: Estad√≠sticas de tarjeta obtenidas');
      return response;
      
    } catch (error) {
      console.error('‚ùå PaymentService: Error obteniendo estad√≠sticas de tarjeta:', error);
      return {
        success: true,
        data: {
          total: 0,
          urgent: 0,
          totalAmount: 0,
          avgAmount: 0,
          avgHours: 0
        }
      };
    }
  }

  /**
   * Confirmar pago con tarjeta procesado
   * @param {string} paymentId - ID del pago
   * @param {Object} confirmationData - Datos de confirmaci√≥n
   * @returns {Promise<Object>} Resultado de la confirmaci√≥n
   */
  async confirmCardPayment(paymentId, confirmationData = {}) {
    try {
      console.log('üí≥ PaymentService: Confirmando pago con TARJETA:', paymentId);
      
      const response = await this.post(`/api/payments/${paymentId}/confirm-card`, {
        notes: confirmationData.notes?.trim() || 'Pago con tarjeta procesado',
        transactionId: confirmationData.transactionId || undefined,
        cardLast4: confirmationData.cardLast4 || undefined,
        confirmedBy: confirmationData.confirmedBy || undefined
      });
      
      console.log('‚úÖ PaymentService: Pago con TARJETA confirmado exitosamente');
      
      // Invalidar cache
      this.invalidatePaymentCache();
      
      return response;
      
    } catch (error) {
      console.error('‚ùå PaymentService: Error confirmando pago con tarjeta:', error);
      throw this.handleError(error, 'Error al confirmar pago con tarjeta');
    }
  }

  /**
   * Cancelar/anular pago con tarjeta
   * @param {string} paymentId - ID del pago
   * @param {Object} cancellationData - Datos de cancelaci√≥n
   * @returns {Promise<Object>} Resultado de la cancelaci√≥n
   */
  async cancelCardPayment(paymentId, cancellationData = {}) {
    try {
      console.log('‚ùå PaymentService: Cancelando pago con TARJETA:', paymentId);
      
      const response = await this.post(`/api/payments/${paymentId}/cancel-card`, {
        reason: cancellationData.reason?.trim() || 'Cancelado por administrador',
        notes: cancellationData.notes?.trim() || ''
      });
      
      console.log('‚úÖ PaymentService: Pago con TARJETA cancelado exitosamente');
      
      // Invalidar cache
      this.invalidatePaymentCache();
      
      return response;
      
    } catch (error) {
      console.error('‚ùå PaymentService: Error cancelando pago con tarjeta:', error);
      throw this.handleError(error, 'Error al cancelar pago con tarjeta');
    }
  }

  // ================================
  // üíº M√âTODOS DE DASHBOARD FINANCIERO
  // ================================

  /**
   * Obtener dashboard financiero completo
   * @returns {Promise<Object>} Dashboard con m√©tricas financieras
   */
  async getFinancialDashboard() {
    try {
      console.log('üíº PaymentService: Obteniendo dashboard financiero...');
      
      const response = await this.get('/api/financial/dashboard');
      
      console.log('‚úÖ PaymentService: Dashboard financiero obtenido');
      return response;
      
    } catch (error) {
      console.error('‚ùå PaymentService: Error obteniendo dashboard financiero:', error);
      // Fallback con estructura b√°sica
      return {
        success: true,
        data: {
          today: { income: 0, expenses: 0, net: 0 },
          thisWeek: { income: 0, expenses: 0, net: 0 },
          thisMonth: { income: 0, expenses: 0, net: 0 },
          charts: {
            incomeChart: [],
            expensesChart: [],
            netChart: []
          }
        }
      };
    }
  }

  // ================================
  // üíµ M√âTODOS DE MEMBRES√çAS EN EFECTIVO (MANTENER COMPATIBILIDAD + MEJORAR)
  // ================================

  /**
   * Obtener membres√≠as pendientes de pago en efectivo - MEJORADO para el test
   * @param {Object} params - Par√°metros de filtro
   * @returns {Promise<Object>} Lista de membres√≠as en efectivo pendientes
   */
  async getPendingCashMemberships(params = {}) {
    try {
      console.log('üíµ PaymentService: Obteniendo membres√≠as en efectivo pendientes...');
      
      // Intentar el endpoint espec√≠fico de membres√≠as primero
      try {
        const response = await this.get('/api/payments/cash/pending-memberships', { params });
        
        if (response?.data && response.data.memberships) {
          console.log(`‚úÖ PaymentService: ${response.data.memberships.length} membres√≠as en efectivo (endpoint espec√≠fico)`);
          return response;
        }
      } catch (error) {
        console.log('‚ö†Ô∏è Endpoint espec√≠fico de membres√≠as no disponible, usando pagos en efectivo...');
      }
      
      // Fallback: usar pagos en efectivo y filtrar por membres√≠as
      const cashPaymentsResponse = await this.getPendingCashPayments(params);
      
      if (cashPaymentsResponse?.success && cashPaymentsResponse.data?.payments) {
        // Filtrar solo las que son de tipo membership o tienen datos de membres√≠a
        const memberships = cashPaymentsResponse.data.payments.filter(payment => 
          payment.paymentType === 'membership' || 
          payment.concept?.toLowerCase().includes('membres√≠a') ||
          payment.membership ||
          payment.plan
        );
        
        console.log(`‚úÖ PaymentService: ${memberships.length} membres√≠as filtradas de pagos en efectivo`);
        
        return {
          success: true,
          data: {
            memberships: memberships,
            summary: {
              totalAmount: memberships.reduce((sum, m) => sum + (m.amount || m.price || 0), 0),
              count: memberships.length
            }
          }
        };
      }
      
      return {
        success: true,
        data: { memberships: [], summary: { totalAmount: 0, count: 0 } }
      };
      
    } catch (error) {
      console.error('‚ùå PaymentService: Error obteniendo membres√≠as en efectivo:', error);
      return {
        success: true,
        data: { memberships: [], summary: { totalAmount: 0, count: 0 } }
      };
    }
  }

  /**
   * Activar membres√≠a en efectivo (confirmar pago recibido)
   * @param {string} membershipId - ID de la membres√≠a
   * @param {Object} activationData - Datos de activaci√≥n
   * @returns {Promise<Object>} Resultado de la activaci√≥n
   */
  async activateCashMembership(membershipId, activationData = {}) {
    try {
      console.log('üíµ PaymentService: Activando membres√≠a en efectivo:', membershipId);
      
      const response = await this.post('/api/payments/activate-cash-membership', {
        membershipId,
        notes: activationData.notes || 'Pago en efectivo recibido'
      });
      
      console.log('‚úÖ PaymentService: Membres√≠a activada exitosamente');
      
      // Invalidar cache
      this.invalidatePaymentCache();
      
      return response;
      
    } catch (error) {
      console.error('‚ùå PaymentService: Error activando membres√≠a:', error);
      throw this.handleError(error, 'Error al activar membres√≠a en efectivo');
    }
  }

  /**
   * Obtener estad√≠sticas espec√≠ficas de membres√≠as en efectivo
   * @returns {Promise<Object>} Estad√≠sticas de membres√≠as en efectivo
   */
  async getCashMembershipStats() {
    try {
      console.log('üìä PaymentService: Obteniendo estad√≠sticas de membres√≠as en efectivo...');
      
      const response = await this.get('/api/payments/cash/membership-stats');
      
      console.log('‚úÖ PaymentService: Estad√≠sticas de membres√≠as obtenidas');
      return response;
      
    } catch (error) {
      console.error('‚ùå PaymentService: Error obteniendo estad√≠sticas de membres√≠as:', error);
      return {
        success: true,
        data: {
          total: 0,
          urgent: 0,
          totalAmount: 0,
          avgAmount: 0,
          avgHours: 0
        }
      };
    }
  }

  // ================================
  // üîß M√âTODOS DE CONFIGURACI√ìN Y UTILIDADES (MANTENER TODOS)
  // ================================

  /**
   * Obtener configuraci√≥n de prioridad para transferencias
   * @param {number} hoursWaiting - Horas de espera
   * @returns {Object} Configuraci√≥n de prioridad con colores y estilos
   */
  getTransferPriorityConfig(hoursWaiting) {
    if (hoursWaiting >= 72) {
      return {
        priority: 'critical',
        label: 'Cr√≠tica',
        color: 'text-red-600',
        bg: 'bg-red-50',
        border: 'border-red-200',
        icon: 'üî¥'
      };
    } else if (hoursWaiting >= 48) {
      return {
        priority: 'high',
        label: 'Alta',
        color: 'text-orange-600',
        bg: 'bg-orange-50',
        border: 'border-orange-200',
        icon: 'üü°'
      };
    } else if (hoursWaiting >= 24) {
      return {
        priority: 'medium',
        label: 'Media',
        color: 'text-yellow-600',
        bg: 'bg-yellow-50',
        border: 'border-yellow-200',
        icon: 'üü†'
      };
    } else {
      return {
        priority: 'normal',
        label: 'Normal',
        color: 'text-green-600',
        bg: 'bg-green-50',
        border: 'border-green-200',
        icon: 'üü¢'
      };
    }
  }

  /**
   * Obtener configuraci√≥n de prioridad para pagos en efectivo
   * @param {number} hoursWaiting - Horas de espera
   * @returns {Object} Configuraci√≥n de prioridad con colores y estilos
   */
  getCashPaymentPriorityConfig(hoursWaiting) {
    if (hoursWaiting >= 4) {
      return {
        priority: 'urgent',
        label: 'Urgente',
        color: 'text-orange-600',
        bg: 'bg-orange-50',
        border: 'border-orange-200',
        icon: 'üü†'
      };
    } else {
      return {
        priority: 'normal',
        label: 'Normal',
        color: 'text-green-600',
        bg: 'bg-green-50',
        border: 'border-green-200',
        icon: 'üü¢'
      };
    }
  }

  /**
   * Obtener configuraci√≥n de prioridad para pagos con tarjeta
   * @param {number} hoursWaiting - Horas de espera
   * @returns {Object} Configuraci√≥n de prioridad con colores y estilos
   */
  getCardPaymentPriorityConfig(hoursWaiting) {
    if (hoursWaiting >= 24) {
      return {
        priority: 'urgent',
        label: 'Urgente',
        color: 'text-red-600',
        bg: 'bg-red-50',
        border: 'border-red-200',
        icon: 'üî¥'
      };
    } else if (hoursWaiting >= 12) {
      return {
        priority: 'medium',
        label: 'Media',
        color: 'text-orange-600',
        bg: 'bg-orange-50',
        border: 'border-orange-200',
        icon: 'üü°'
      };
    } else {
      return {
        priority: 'normal',
        label: 'Normal',
        color: 'text-green-600',
        bg: 'bg-green-50',
        border: 'border-green-200',
        icon: 'üü¢'
      };
    }
  }

  /**
   * Obtener configuraci√≥n de m√©todo de pago
   * @param {string} method - M√©todo de pago
   * @returns {Object} Configuraci√≥n con iconos y estilos
   */
  getPaymentMethodConfig(method) {
    const configs = {
      cash: {
        label: 'Efectivo',
        icon: 'Banknote',
        color: 'text-green-600',
        bgColor: 'bg-green-50',
        description: 'Pago f√≠sico en efectivo'
      },
      card: {
        label: 'Tarjeta',
        icon: 'CreditCard',
        color: 'text-blue-600',
        bgColor: 'bg-blue-50',
        description: 'Pago con tarjeta de cr√©dito/d√©bito'
      },
      transfer: {
        label: 'Transferencia',
        icon: 'Building',
        color: 'text-purple-600',
        bgColor: 'bg-purple-50',
        description: 'Transferencia bancaria'
      },
      mobile: {
        label: 'Pago M√≥vil',
        icon: 'Smartphone',
        color: 'text-indigo-600',
        bgColor: 'bg-indigo-50',
        description: 'Pago a trav√©s de aplicaci√≥n m√≥vil'
      }
    };
    
    return configs[method] || configs.cash;
  }

  /**
   * Obtener configuraci√≥n de estado de pago
   * @param {string} status - Estado del pago
   * @returns {Object} Configuraci√≥n con colores y estilos
   */
  getPaymentStatusConfig(status) {
    const configs = {
      completed: {
        label: 'Completado',
        color: 'text-green-600',
        bgColor: 'bg-green-100',
        description: 'Pago procesado exitosamente'
      },
      pending: {
        label: 'Pendiente',
        color: 'text-yellow-600',
        bgColor: 'bg-yellow-100',
        description: 'Pago esperando confirmaci√≥n'
      },
      failed: {
        label: 'Fallido',
        color: 'text-red-600',
        bgColor: 'bg-red-100',
        description: 'Pago no pudo ser procesado'
      },
      cancelled: {
        label: 'Cancelado',
        color: 'text-gray-600',
        bgColor: 'bg-gray-100',
        description: 'Pago cancelado por el usuario o administrador'
      }
    };
    
    return configs[status] || configs.pending;
  }

  /**
   * Obtener configuraci√≥n de tipo de pago
   * @param {string} type - Tipo de pago
   * @returns {Object} Configuraci√≥n con etiquetas
   */
  getPaymentTypeConfig(type) {
    const configs = {
      membership: {
        label: 'Membres√≠a',
        description: 'Pago de cuota mensual de membres√≠a'
      },
      daily: {
        label: 'Pago Diario',
        description: 'Acceso por d√≠a individual'
      },
      bulk_daily: {
        label: 'Pago M√∫ltiple',
        description: 'Varios d√≠as consecutivos'
      },
      store_cash_delivery: {
        label: 'Tienda (Efectivo)',
        description: 'Compra en tienda pagada en efectivo'
      },
      store_card_delivery: {
        label: 'Tienda (Tarjeta)',
        description: 'Compra en tienda pagada con tarjeta'
      },
      store_online: {
        label: 'Tienda (Online)',
        description: 'Compra online de la tienda'
      },
      store_transfer: {
        label: 'Tienda (Transferencia)',
        description: 'Compra en tienda pagada por transferencia'
      }
    };
    
    return configs[type] || configs.membership;
  }

  // ================================
  // üóÉÔ∏è M√âTODOS DE CACHE (MANTENER TODOS)
  // ================================

  /**
   * Obtener datos del cache
   * @param {string} key - Clave del cache
   * @returns {Object|null} Datos cacheados o null
   */
  getCachedData(key) {
    const cached = this.cache.get(key);
    
    if (cached && Date.now() - cached.timestamp < this.cacheTimeout) {
      return cached.data;
    }
    
    this.cache.delete(key);
    return null;
  }

  /**
   * Guardar datos en cache
   * @param {string} key - Clave del cache
   * @param {Object} data - Datos a cachear
   */
  setCachedData(key, data) {
    this.cache.set(key, {
      data,
      timestamp: Date.now()
    });
  }

  /**
   * Invalidar cache de pagos
   */
  invalidatePaymentCache() {
    console.log('üóëÔ∏è PaymentService: Invalidando cache de pagos');
    this.cache.clear();
  }

  /**
   * Obtener dashboard de pendientes con cache
   * @returns {Promise<Object>} Dashboard con cache optimizado
   */
  async getPendingPaymentsDashboardWithCache() {
    const cacheKey = 'pendingDashboard';
    const cached = this.getCachedData(cacheKey);
    
    if (cached) {
      console.log('üìã PaymentService: Usando dashboard desde cache');
      return cached;
    }
    
    const data = await this.getPendingPaymentsDashboard();
    this.setCachedData(cacheKey, data);
    
    return data;
  }

  // ================================
  // üéØ M√âTODOS DE COMPATIBILIDAD CON HOOKS EXISTENTES
  // ================================

  /**
   * Funci√≥n para obtener icono del m√©todo de pago - COMPATIBILIDAD
   */
  getPaymentMethodIcon(method) {
    const icons = {
      cash: 'Banknote',
      card: 'CreditCard',
      transfer: 'Building',
      mobile: 'Building'
    };
    return icons[method] || 'CreditCard';
  }

  /**
   * Funci√≥n para obtener color del estado - COMPATIBILIDAD
   */
  getStatusColor(status) {
    const colors = {
      completed: 'text-green-600 bg-green-100',
      pending: 'text-yellow-600 bg-yellow-100',
      failed: 'text-red-600 bg-red-100',
      cancelled: 'text-gray-600 bg-gray-100'
    };
    return colors[status] || colors.completed;
  }

  // ================================
  // üõ†Ô∏è M√âTODOS DE DEBUGGING Y SALUD (MANTENER TODOS)
  // ================================

  /**
   * Verificar salud del sistema de pagos
   * @returns {Promise<Object>} Estado de salud del sistema
   */
  async paymentHealthCheck() {
    try {
      console.log('üè• PaymentService: Verificando salud del sistema...');
      
      const response = await this.get('/api/payments/health');
      
      console.log('‚úÖ PaymentService: Sistema de pagos saludable');
      return response;
      
    } catch (error) {
      console.error('‚ùå PaymentService: Sistema de pagos con problemas:', error);
      return {
        success: false,
        message: 'Sistema de pagos no disponible',
        error: error.message
      };
    }
  }

  /**
   * Obtener informaci√≥n del servicio de pagos
   * @returns {Object} Informaci√≥n del servicio
   */
  getPaymentServiceInfo() {
    return {
      name: 'PaymentService',
      version: '2.1.0',
      features: [
        'Historial de pagos con filtros avanzados',
        'Gesti√≥n separada por m√©todo de pago',
        'Validaci√≥n de transferencias',
        'Confirmaci√≥n de pagos en efectivo',
        'Procesamiento de pagos con tarjeta',
        'Dashboard financiero completo',
        'Estad√≠sticas detalladas por m√©todo',
        'Cache inteligente optimizado',
        'Configuraciones de UI completas',
        'Sistema de prioridades por tiempo',
        'Sincronizaci√≥n con backend mejorada',
        'Compatibilidad con hooks existentes'
      ],
      supportedMethods: ['cash', 'card', 'transfer', 'mobile'],
      supportedTypes: ['membership', 'daily', 'bulk_daily', 'store_cash_delivery', 'store_card_delivery', 'store_online', 'store_transfer'],
      supportedStatuses: ['completed', 'pending', 'failed', 'cancelled'],
      apiEndpoints: {
        general: [
          'GET /api/payments',
          'GET /api/payments/:id',
          'GET /api/payments/search',
          'GET /api/payments/statistics',
          'GET /api/payments/pending-dashboard'
        ],
        cash: [
          'GET /api/payments/cash/pending',
          'GET /api/payments/cash/stats',
          'GET /api/payments/cash/pending-memberships',
          'POST /api/payments/:id/confirm-cash',
          'POST /api/payments/:id/cancel-cash',
          'POST /api/payments/activate-cash-membership'
        ],
        transfers: [
          'GET /api/payments/transfers/pending',
          'GET /api/payments/transfers/pending-detailed',
          'POST /api/payments/:id/validate-transfer',
          'POST /api/payments/:id/reject-transfer'
        ],
        cards: [
          'GET /api/payments/card/pending',
          'GET /api/payments/card/stats',
          'POST /api/payments/:id/confirm-card',
          'POST /api/payments/:id/cancel-card'
        ],
        stripe: [
          'GET /api/stripe/payments'
        ],
        financial: [
          'GET /api/financial/dashboard'
        ]
      }
    };
  }

  /**
   * Debug completo del sistema de pagos
   * @returns {Promise<Object>} Informaci√≥n de debug
   */
  async debugPaymentSystem() {
    console.log('üîç PaymentService: Iniciando debug completo...');
    
    const debugInfo = {
      serviceInfo: this.getPaymentServiceInfo(),
      cacheSize: this.cache.size,
      systemHealth: await this.paymentHealthCheck(),
      timestamp: new Date().toISOString()
    };
    
    try {
      // Probar endpoints principales
      debugInfo.endpoints = {
        payments: await this.getPayments({ limit: 1 }).then(() => '‚úÖ OK').catch(() => '‚ùå Error'),
        statistics: await this.getPaymentStatistics().then(() => '‚úÖ OK').catch(() => '‚ùå Error'),
        pendingDashboard: await this.getPendingPaymentsDashboard().then(() => '‚úÖ OK').catch(() => '‚ùå Error'),
        transfers: await this.getPendingTransfers().then(() => '‚úÖ OK').catch(() => '‚ùå Error'),
        cashPayments: await this.getPendingCashPayments().then(() => '‚úÖ OK').catch(() => '‚ùå Error'),
        cashMemberships: await this.getPendingCashMemberships().then(() => '‚úÖ OK').catch(() => '‚ùå Error'),
        cardPayments: await this.getCardPayments().then(() => '‚úÖ OK').catch(() => '‚ùå Error'),
        stripePayments: await this.getStripePayments().then(() => '‚úÖ OK').catch(() => '‚ùå Error')
      };
    } catch (error) {
      debugInfo.endpoints = { error: error.message };
    }
    
    console.log('üîç PaymentService: Debug completado', debugInfo);
    return debugInfo;
  }

  /**
   * NUEVO: M√©todo para obtener todos los datos como en el script de testing
   * @returns {Promise<Object>} Todos los datos del sistema de pagos
   */
  async getAllPaymentData() {
    try {
      console.log('üéØ PaymentService: Obteniendo TODOS los datos como en el test...');
      
      const [
        statistics,
        pendingDashboard,
        pendingCash,
        pendingTransfers,
        cardPayments,
        stripePayments,
        allPayments,
        financialDashboard
      ] = await Promise.all([
        this.getPaymentStatistics(),
        this.getPendingPaymentsDashboard(),
        this.getPendingCashPayments(),
        this.getPendingTransfers(),
        this.getCardPayments(),
        this.getStripePayments(),
        this.getPayments({ limit: 100 }),
        this.getFinancialDashboard()
      ]);
      
      console.log('‚úÖ TODOS los datos obtenidos exitosamente');
      
      return {
        success: true,
        data: {
          statistics: statistics.data,
          pendingDashboard: pendingDashboard.data,
          pendingCash: pendingCash.data,
          pendingTransfers: pendingTransfers.data,
          cardPayments: cardPayments.data,
          stripePayments: stripePayments.data,
          allPayments: allPayments.data,
          financialDashboard: financialDashboard.data
        }
      };
      
    } catch (error) {
      console.error('‚ùå Error obteniendo todos los datos:', error);
      throw error;
    }
  }
}


// ================================
// üè≠ EXPORTAR INSTANCIA SINGLETON
// ================================
const paymentService = new PaymentService();

export default paymentService;