// src/services/paymentService.js
// SERVICIO COMPLETO PARA GESTI√ìN DE PAGOS Y AUTORIZACIONES
// Autor: Alexander Echeverria
// Versi√≥n: 2.0 - Completo con todas las mejoras aplicadas

import axios from 'axios';

// ================================
// üèóÔ∏è CLASE BASE PARA EL SERVICIO
// ================================
class PaymentService {
  constructor() {
    this.baseURL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';
    this.cache = new Map();
    this.cacheMaxAge = 30000; // 30 segundos por defecto
    
    // Configurar axios
    this.axiosInstance = axios.create({
      baseURL: this.baseURL,
      timeout: 30000,
      headers: {
        'Content-Type': 'application/json'
      }
    });
    
    // Interceptor para agregar token autom√°ticamente
    this.axiosInstance.interceptors.request.use(
      (config) => {
        const token = localStorage.getItem('token');
        if (token) {
          config.headers.Authorization = `Bearer ${token}`;
        }
        return config;
      },
      (error) => Promise.reject(error)
    );
    
    // Interceptor para manejar respuestas
    this.axiosInstance.interceptors.response.use(
      (response) => response,
      (error) => {
        console.error('PaymentService Error:', error.response?.status, error.message);
        return Promise.reject(error);
      }
    );
    
    console.log('üöÄ PaymentService initialized');
  }

  // ================================
  // üîß M√âTODOS AUXILIARES
  // ================================

  /**
   * Maneja errores de API de forma consistente
   */
  handleApiError(error, defaultMessage = 'Error en el servidor') {
    const message = error.response?.data?.message || defaultMessage;
    const status = error.response?.status || 500;
    
    console.error(`‚ùå PaymentService Error [${status}]:`, message);
    
    return new Error(message);
  }

  /**
   * Realiza petici√≥n GET con manejo de errores
   */
  async get(endpoint, params = {}) {
    try {
      const response = await this.axiosInstance.get(endpoint, { params });
      return response.data;
    } catch (error) {
      throw this.handleApiError(error, `Error al obtener datos de ${endpoint}`);
    }
  }

  /**
   * Realiza petici√≥n POST con manejo de errores
   */
  async post(endpoint, data = {}) {
    try {
      const response = await this.axiosInstance.post(endpoint, data);
      return response.data;
    } catch (error) {
      throw this.handleApiError(error, `Error al enviar datos a ${endpoint}`);
    }
  }

  /**
   * Realiza petici√≥n PUT con manejo de errores
   */
  async put(endpoint, data = {}) {
    try {
      const response = await this.axiosInstance.put(endpoint, data);
      return response.data;
    } catch (error) {
      throw this.handleApiError(error, `Error al actualizar datos en ${endpoint}`);
    }
  }

  /**
   * Realiza petici√≥n DELETE con manejo de errores
   */
  async delete(endpoint) {
    try {
      const response = await this.axiosInstance.delete(endpoint);
      return response.data;
    } catch (error) {
      throw this.handleApiError(error, `Error al eliminar datos de ${endpoint}`);
    }
  }

  // ================================
  // üìä DASHBOARD Y VISTAS COMBINADAS
  // ================================

  /**
   * Obtiene vista combinada de movimientos financieros
   */
  async getMovementsWithPayments(params = {}) {
    try {
      const response = await this.get('/financial/movements-with-payments', params);
      return response;
    } catch (error) {
      console.warn('‚ö†Ô∏è Fallback: movements-with-payments no disponible');
      return {
        data: {
          items: [],
          pagination: { total: 0, page: 1, pages: 0, limit: 20 },
          summary: { totalAmount: 0, pendingAmount: 0, pendingCount: 0 }
        }
      };
    }
  }

  /**
   * Dashboard de pagos pendientes
   */
  async getPendingPaymentsDashboard() {
    try {
      const response = await this.get('/payments/pending-dashboard');
      return response;
    } catch (error) {
      console.warn('‚ö†Ô∏è Fallback: pending-dashboard no disponible');
      return {
        data: {
          summary: {
            pendingTransfers: { count: 0, totalAmount: 0, oldestHours: 0 },
            pendingCashMemberships: { count: 0, totalAmount: 0, oldestHours: 0 },
            todayValidations: { approved: 0, rejected: 0, totalProcessed: 0 }
          },
          urgentItems: [],
          recentActivity: []
        }
      };
    }
  }

  /**
   * Dashboard con cache para mejor rendimiento
   */
  async getPendingPaymentsDashboardWithCache(maxAge = 30000) {
    const cacheKey = 'pending-payments-dashboard';
    const cached = this.getCachedData(cacheKey, maxAge);
    
    if (cached) {
      console.log('üì¶ Cache hit: pending-dashboard');
      return cached;
    }

    const data = await this.getPendingPaymentsDashboard();
    this.setCachedData(cacheKey, data);
    return data;
  }

  // ================================
  // üè¶ TRANSFERENCIAS BANCARIAS
  // ================================

  /**
   * Obtiene transferencias pendientes b√°sicas
   */
  async getPendingTransfers(hoursFilter = null) {
    try {
      const params = hoursFilter ? { hoursFilter } : {};
      const response = await this.get('/payments/transfers/pending', params);
      return response;
    } catch (error) {
      console.warn('‚ö†Ô∏è Fallback: pending transfers b√°sicas no disponibles');
      return {
        data: {
          transfers: [],
          total: 0
        }
      };
    }
  }

  /**
   * Obtiene transferencias pendientes con detalles completos
   */
  async getPendingTransfersDetailed(hoursFilter = null) {
    try {
      const params = hoursFilter ? { hoursFilter } : {};
      const response = await this.get('/payments/transfers/pending-detailed', params);
      
      // Procesar y enriquecer datos
      if (response.data && response.data.transfers) {
        response.data.transfers = response.data.transfers.map(transfer => ({
          ...transfer,
          hoursWaiting: transfer.hoursWaiting || 0,
          priority: this.calculateTransferPriority(transfer.hoursWaiting || 0),
          canValidate: true
        }));
      }
      
      return response;
    } catch (error) {
      console.warn('‚ö†Ô∏è Fallback: pending transfers detalladas no disponibles');
      return {
        data: {
          transfers: [],
          total: 0,
          groupedByPriority: { critical: [], high: [], medium: [], normal: [] },
          summary: {
            totalAmount: 0,
            averageWaitingHours: 0,
            criticalCount: 0,
            oldestHours: 0
          }
        }
      };
    }
  }

  /**
   * Calcula prioridad de transferencia basada en horas de espera
   */
  calculateTransferPriority(hoursWaiting) {
    if (hoursWaiting >= 72) return 'critical';
    if (hoursWaiting >= 48) return 'high';
    if (hoursWaiting >= 24) return 'medium';
    return 'normal';
  }

  /**
   * Valida una transferencia bancaria (aprobar)
   */
  async validateTransfer(paymentId, approved, notes = '') {
    try {
      const payload = {
        approved,
        notes: notes || (approved ? 'Transferencia aprobada desde dashboard' : 'Transferencia rechazada desde dashboard')
      };
      
      console.log(`üè¶ ${approved ? 'Aprobando' : 'Rechazando'} transferencia ${paymentId}`);
      
      const response = await this.post(`/payments/${paymentId}/validate-transfer`, payload);
      
      // Invalidar cache despu√©s del cambio
      this.invalidateCache();
      
      return response;
    } catch (error) {
      throw this.handleApiError(error, 'Error al procesar transferencia');
    }
  }

  /**
   * Rechaza una transferencia bancaria (m√©todo espec√≠fico)
   */
  async rejectTransfer(paymentId, reason) {
    try {
      console.log(`‚ùå Rechazando transferencia ${paymentId}: ${reason}`);
      
      const response = await this.post(`/payments/${paymentId}/reject-transfer`, {
        reason
      });
      
      // Invalidar cache despu√©s del cambio
      this.invalidateCache();
      
      return response;
    } catch (error) {
      throw this.handleApiError(error, 'Error al rechazar transferencia');
    }
  }

  // ================================
  // üíµ MEMBRES√çAS EN EFECTIVO
  // ================================

  /**
   * Obtiene membres√≠as pendientes de pago en efectivo
   */
  async getPendingCashMemberships() {
    try {
      const response = await this.get('/memberships/pending-cash-payment');
      
      // Procesar y enriquecer datos
      if (response.data && response.data.memberships) {
        response.data.memberships = response.data.memberships.map(membership => ({
          ...membership,
          hoursWaiting: membership.hoursWaiting || 0,
          canActivate: membership.status === 'pending',
          urgencyLevel: (membership.hoursWaiting || 0) >= 4 ? 2 : 1
        }));
      }
      
      return response;
    } catch (error) {
      console.warn('‚ö†Ô∏è Fallback: pending cash memberships no disponibles');
      
      // Si es error 500, probablemente el endpoint no existe
      if (error.response?.status === 500) {
        console.warn('üîß El endpoint de membres√≠as en efectivo parece no estar implementado en el backend');
      }
      
      return {
        data: {
          memberships: [],
          total: 0
        }
      };
    }
  }

  /**
   * Activa una membres√≠a cuando se recibe el pago en efectivo
   */
  async activateCashMembership(membershipId) {
    try {
      console.log(`üíµ Activando membres√≠a en efectivo: ${membershipId}`);
      
      const response = await this.post('/payments/activate-cash-membership', {
        membershipId
      });
      
      // Invalidar cache despu√©s del cambio
      this.invalidateCache();
      
      return response;
    } catch (error) {
      throw this.handleApiError(error, 'Error al activar membres√≠a en efectivo');
    }
  }

  // ================================
  // üí≥ PAGOS REGULARES
  // ================================

  /**
   * Obtiene pagos regulares con filtros
   */
  async getPayments(params = {}) {
    try {
      const response = await this.get('/payments', params);
      return response;
    } catch (error) {
      console.warn('‚ö†Ô∏è Error al obtener pagos regulares');
      return {
        data: {
          payments: [],
          pagination: { total: 0, page: 1, pages: 0, limit: 20 }
        }
      };
    }
  }

  /**
   * Crea un nuevo pago
   */
  async createPayment(paymentData) {
    try {
      // Validar datos antes de enviar
      const validation = this.validatePaymentData(paymentData);
      if (!validation.isValid) {
        throw new Error(validation.errors[0]);
      }

      // Formatear datos para la API
      const formattedData = this.formatPaymentDataForAPI(paymentData);
      
      console.log('üí≥ Creando nuevo pago:', formattedData);
      
      const response = await this.post('/payments', formattedData);
      
      // Invalidar cache
      this.invalidateCache();
      
      return response;
    } catch (error) {
      throw this.handleApiError(error, 'Error al crear pago');
    }
  }

  /**
   * Actualiza un pago existente
   */
  async updatePayment(paymentId, paymentData) {
    try {
      const validation = this.validatePaymentData(paymentData);
      if (!validation.isValid) {
        throw new Error(validation.errors[0]);
      }

      const formattedData = this.formatPaymentDataForAPI(paymentData);
      
      console.log('‚úèÔ∏è Actualizando pago:', paymentId);
      
      const response = await this.put(`/payments/${paymentId}`, formattedData);
      
      // Invalidar cache
      this.invalidateCache();
      
      return response;
    } catch (error) {
      throw this.handleApiError(error, 'Error al actualizar pago');
    }
  }

  /**
   * Obtiene un pago espec√≠fico por ID
   */
  async getPaymentById(paymentId) {
    try {
      const response = await this.get(`/payments/${paymentId}`);
      return response;
    } catch (error) {
      throw this.handleApiError(error, `Error al obtener pago ${paymentId}`);
    }
  }

  // ================================
  // üìà ESTAD√çSTICAS Y REPORTES
  // ================================

  /**
   * Obtiene estad√≠sticas de pagos
   */
  async getPaymentStatistics(dateRange = {}) {
    try {
      const response = await this.get('/payments/statistics', dateRange);
      
      // Asegurar estructura m√≠nima de estad√≠sticas
      const stats = response.data || response;
      return {
        data: {
          totalIncome: stats.totalIncome || 0,
          totalPayments: stats.totalPayments || 0,
          completedPayments: stats.completedPayments || 0,
          pendingPayments: stats.pendingPayments || 0,
          failedPayments: stats.failedPayments || 0,
          averagePayment: stats.averagePayment || 0,
          uniqueClients: stats.uniqueClients || 0,
          newClients: stats.newClients || 0,
          incomeByMethod: stats.incomeByMethod || [],
          dailyIncome: stats.dailyIncome || [],
          ...stats // Incluir cualquier stat adicional
        }
      };
    } catch (error) {
      console.warn('‚ö†Ô∏è Fallback: estad√≠sticas no disponibles');
      return {
        data: {
          totalIncome: 0,
          totalPayments: 0,
          completedPayments: 0,
          pendingPayments: 0,
          failedPayments: 0,
          averagePayment: 0,
          uniqueClients: 0,
          newClients: 0,
          incomeByMethod: [],
          dailyIncome: []
        }
      };
    }
  }

  /**
   * Obtiene estad√≠sticas con cache
   */
  async getPaymentStatisticsWithCache(dateRange = {}, maxAge = 60000) {
    const cacheKey = `payment-stats-${JSON.stringify(dateRange)}`;
    const cached = this.getCachedData(cacheKey, maxAge);
    
    if (cached) {
      console.log('üì¶ Cache hit: payment-statistics');
      return cached;
    }

    const data = await this.getPaymentStatistics(dateRange);
    this.setCachedData(cacheKey, data);
    return data;
  }

  /**
   * Exporta reporte de pagos
   */
  async exportPaymentReport(format = 'csv', params = {}) {
    try {
      const response = await this.axiosInstance.get('/payments/export', {
        params: { format, ...params },
        responseType: 'blob'
      });
      
      return response;
    } catch (error) {
      throw this.handleApiError(error, 'Error al exportar reporte');
    }
  }

  // ================================
  // üîß VALIDACI√ìN Y FORMATEO
  // ================================

  /**
   * Valida datos de pago antes del env√≠o
   */
  validatePaymentData(paymentData) {
    const errors = [];

    // Validaciones obligatorias
    if (!paymentData.amount || paymentData.amount <= 0) {
      errors.push('El monto debe ser mayor a 0');
    }

    if (!paymentData.paymentMethod) {
      errors.push('El m√©todo de pago es requerido');
    }

    if (!paymentData.paymentType) {
      errors.push('El tipo de pago es requerido');
    }

    if (!paymentData.paymentDate) {
      errors.push('La fecha de pago es requerida');
    }

    // Validaci√≥n de usuario o cliente an√≥nimo
    if (!paymentData.userId && !paymentData.anonymousClientInfo?.name) {
      errors.push('Debe especificar un usuario o informaci√≥n del cliente an√≥nimo');
    }

    // Validaciones espec√≠ficas por tipo
    if (paymentData.paymentType === 'bulk_daily') {
      if (!paymentData.dailyPaymentCount || paymentData.dailyPaymentCount < 1) {
        errors.push('Para pagos m√∫ltiples debe especificar el n√∫mero de d√≠as');
      }
    }

    // Validaciones de m√©todo de pago
    if (paymentData.paymentMethod === 'transfer' && !paymentData.transferProof) {
      console.warn('‚ö†Ô∏è Transferencia sin comprobante - requerir√° validaci√≥n manual');
    }

    return {
      isValid: errors.length === 0,
      errors,
      warnings: errors.length === 0 ? [] : ['Revisa los campos marcados como requeridos']
    };
  }

  /**
   * Formatea datos de pago para la API
   */
  formatPaymentDataForAPI(paymentData) {
    return {
      // Campos b√°sicos
      amount: parseFloat(paymentData.amount) || 0,
      paymentMethod: paymentData.paymentMethod,
      paymentType: paymentData.paymentType,
      paymentDate: paymentData.paymentDate,
      description: paymentData.description || '',
      notes: paymentData.notes || '',
      
      // Referencias opcionales
      userId: paymentData.userId || null,
      membershipId: paymentData.membershipId || null,
      
      // Para pagos m√∫ltiples
      dailyPaymentCount: parseInt(paymentData.dailyPaymentCount) || 1,
      
      // Cliente an√≥nimo (solo si no hay userId)
      anonymousClientInfo: paymentData.userId ? null : {
        name: paymentData.anonymousClientInfo?.name || '',
        phone: paymentData.anonymousClientInfo?.phone || '',
        email: paymentData.anonymousClientInfo?.email || ''
      },
      
      // Metadatos
      createdAt: new Date().toISOString(),
      createdBy: 'dashboard' // Identificador del origen
    };
  }

  // ================================
  // üé® CONFIGURACIONES DE UI
  // ================================

  /**
   * Configuraci√≥n de prioridad por tiempo de espera
   */
  getTransferPriorityConfig(hoursWaiting) {
    if (hoursWaiting >= 72) {
      return {
        priority: 'critical',
        color: 'text-red-600',
        bg: 'bg-red-50',
        borderColor: 'border-red-200',
        badge: 'üö® Cr√≠tica',
        urgencyLevel: 4
      };
    } else if (hoursWaiting >= 48) {
      return {
        priority: 'high',
        color: 'text-orange-600',
        bg: 'bg-orange-50',
        borderColor: 'border-orange-200',
        badge: '‚ö†Ô∏è Alta',
        urgencyLevel: 3
      };
    } else if (hoursWaiting >= 24) {
      return {
        priority: 'medium',
        color: 'text-yellow-600',
        bg: 'bg-yellow-50',
        borderColor: 'border-yellow-200',
        badge: '‚è∞ Media',
        urgencyLevel: 2
      };
    }
    
    return {
      priority: 'normal',
      color: 'text-green-600',
      bg: 'bg-green-50',
      borderColor: 'border-green-200',
      badge: 'üìù Normal',
      urgencyLevel: 1
    };
  }

  /**
   * Configuraci√≥n de m√©todos de pago
   */
  getPaymentMethodConfig(method) {
    const configs = {
      'transfer': {
        name: 'Transferencia Bancaria',
        icon: 'üè¶',
        color: 'text-purple-600',
        bgColor: 'bg-purple-50',
        requiresValidation: true,
        description: 'Transferencia bancaria guatemalteca'
      },
      'cash': {
        name: 'Efectivo',
        icon: 'üíµ',
        color: 'text-green-600',
        bgColor: 'bg-green-50',
        requiresValidation: true,
        description: 'Pago en efectivo en recepci√≥n'
      },
      'card': {
        name: 'Tarjeta',
        icon: 'üí≥',
        color: 'text-blue-600',
        bgColor: 'bg-blue-50',
        requiresValidation: false,
        description: 'Tarjeta de cr√©dito/d√©bito'
      },
      'mobile': {
        name: 'Pago M√≥vil',
        icon: 'üì±',
        color: 'text-orange-600',
        bgColor: 'bg-orange-50',
        requiresValidation: false,
        description: 'Aplicaciones de pago m√≥vil'
      }
    };

    return configs[method] || {
      name: method,
      icon: 'üí∞',
      color: 'text-gray-600',
      bgColor: 'bg-gray-50',
      requiresValidation: false,
      description: 'M√©todo de pago personalizado'
    };
  }

  /**
   * Configuraci√≥n de estados de pago
   */
  getPaymentStatusConfig(status) {
    const configs = {
      'pending': {
        name: 'Pendiente',
        color: 'text-yellow-600',
        bgColor: 'bg-yellow-50',
        icon: '‚è≥',
        description: 'Esperando procesamiento'
      },
      'completed': {
        name: 'Completado',
        color: 'text-green-600',
        bgColor: 'bg-green-50',
        icon: '‚úÖ',
        description: 'Pago completado exitosamente'
      },
      'failed': {
        name: 'Fallido',
        color: 'text-red-600',
        bgColor: 'bg-red-50',
        icon: '‚ùå',
        description: 'Pago fall√≥ o fue rechazado'
      },
      'cancelled': {
        name: 'Cancelado',
        color: 'text-gray-600',
        bgColor: 'bg-gray-50',
        icon: 'üö´',
        description: 'Pago cancelado por el usuario'
      },
      'refunded': {
        name: 'Reembolsado',
        color: 'text-orange-600',
        bgColor: 'bg-orange-50',
        icon: '‚Ü©Ô∏è',
        description: 'Dinero devuelto al cliente'
      }
    };

    return configs[status] || {
      name: status,
      color: 'text-gray-600',
      bgColor: 'bg-gray-50',
      icon: '‚ùì',
      description: 'Estado desconocido'
    };
  }

  /**
   * Configuraci√≥n de tipos de pago
   */
  getPaymentTypeConfig(type) {
    const configs = {
      'membership': {
        name: 'Membres√≠a',
        color: 'text-purple-600',
        bgColor: 'bg-purple-50',
        icon: 'üé´',
        description: 'Pago de cuota mensual o plan'
      },
      'daily': {
        name: 'Pago Diario',
        color: 'text-blue-600',
        bgColor: 'bg-blue-50',
        icon: 'üìÖ',
        description: 'Acceso por d√≠a individual'
      },
      'bulk_daily': {
        name: 'Pago M√∫ltiple',
        color: 'text-green-600',
        bgColor: 'bg-green-50',
        icon: 'üìä',
        description: 'M√∫ltiples d√≠as consecutivos'
      },
      'product': {
        name: 'Producto',
        color: 'text-orange-600',
        bgColor: 'bg-orange-50',
        icon: 'üì¶',
        description: 'Venta de productos'
      },
      'service': {
        name: 'Servicio',
        color: 'text-pink-600',
        bgColor: 'bg-pink-50',
        icon: 'üîß',
        description: 'Servicios adicionales'
      }
    };

    return configs[type] || {
      name: type,
      color: 'text-gray-600',
      bgColor: 'bg-gray-50',
      icon: 'üíº',
      description: 'Tipo de pago personalizado'
    };
  }

  // ================================
  // üóÉÔ∏è GESTI√ìN DE CACHE
  // ================================

  /**
   * Obtiene datos del cache
   */
  getCachedData(key, maxAge = this.cacheMaxAge) {
    const cached = this.cache.get(key);
    
    if (!cached) return null;
    
    const age = Date.now() - cached.timestamp;
    if (age > maxAge) {
      this.cache.delete(key);
      console.log(`üóëÔ∏è Cache expired: ${key}`);
      return null;
    }
    
    console.log(`üì¶ Cache hit: ${key} (age: ${age}ms)`);
    return cached.data;
  }

  /**
   * Guarda datos en el cache
   */
  setCachedData(key, data) {
    this.cache.set(key, {
      data,
      timestamp: Date.now()
    });
    console.log(`üíæ Cache set: ${key}`);
  }

  /**
   * Invalida todo el cache
   */
  invalidateCache() {
    const size = this.cache.size;
    this.cache.clear();
    console.log(`üóëÔ∏è Cache invalidated: ${size} items cleared`);
  }

  /**
   * Invalida cache espec√≠fico por patr√≥n
   */
  invalidateCachePattern(pattern) {
    let deleted = 0;
    for (const key of this.cache.keys()) {
      if (key.includes(pattern)) {
        this.cache.delete(key);
        deleted++;
      }
    }
    console.log(`üóëÔ∏è Cache pattern '${pattern}' invalidated: ${deleted} items`);
  }

  /**
   * Obtiene informaci√≥n del cache
   */
  getCacheInfo() {
    const info = {
      size: this.cache.size,
      keys: Array.from(this.cache.keys()),
      totalMemory: 0
    };

    for (const [key, value] of this.cache) {
      info.totalMemory += JSON.stringify(value).length;
    }

    return info;
  }

  // ================================
  // üõ†Ô∏è DEBUGGING Y DESARROLLO
  // ================================

  /**
   * Debug completo del sistema de pagos
   */
  async debugPaymentSystem() {
    console.log('üîç Iniciando debug del sistema de pagos...');
    
    const endpoints = [
      { name: 'Dashboard', method: 'getPendingPaymentsDashboard' },
      { name: 'Transferencias Detalladas', method: 'getPendingTransfersDetailed' },
      { name: 'Transferencias B√°sicas', method: 'getPendingTransfers' },
      { name: 'Membres√≠as en Efectivo', method: 'getPendingCashMemberships' },
      { name: 'Estad√≠sticas', method: 'getPaymentStatistics' },
      { name: 'Movimientos', method: 'getMovementsWithPayments' }
    ];

    const results = {};
    const startTime = Date.now();

    for (const endpoint of endpoints) {
      const endpointStart = Date.now();
      try {
        console.log(`üîç Probando ${endpoint.name}...`);
        const response = await this[endpoint.method]();
        const responseTime = Date.now() - endpointStart;
        
        results[endpoint.name] = {
          status: 'success',
          responseTime: `${responseTime}ms`,
          dataSize: JSON.stringify(response).length,
          hasData: !!response.data,
          dataType: Array.isArray(response.data) ? 'array' : typeof response.data,
          dataCount: Array.isArray(response.data) ? response.data.length : 'N/A'
        };
        console.log(`‚úÖ ${endpoint.name} - OK (${responseTime}ms)`);
      } catch (error) {
        const responseTime = Date.now() - endpointStart;
        results[endpoint.name] = {
          status: 'error',
          responseTime: `${responseTime}ms`,
          error: error.message,
          statusCode: error.response?.status || 'unknown'
        };
        console.log(`‚ùå ${endpoint.name} - Error: ${error.message} (${responseTime}ms)`);
      }
    }

    const totalTime = Date.now() - startTime;
    const cacheInfo = this.getCacheInfo();

    const debugInfo = {
      timestamp: new Date().toISOString(),
      totalExecutionTime: `${totalTime}ms`,
      endpoints: results,
      cache: {
        size: cacheInfo.size,
        keys: cacheInfo.keys,
        memoryUsage: `${(cacheInfo.totalMemory / 1024).toFixed(2)} KB`
      },
      configuration: {
        baseURL: this.baseURL,
        cacheMaxAge: `${this.cacheMaxAge}ms`,
        timeout: `${this.axiosInstance.defaults.timeout}ms`
      },
      summary: {
        total: endpoints.length,
        successful: Object.values(results).filter(r => r.status === 'success').length,
        failed: Object.values(results).filter(r => r.status === 'error').length
      }
    };

    console.log('üìä Debug completado:', debugInfo);
    return debugInfo;
  }

  /**
   * Prueba de conectividad b√°sica
   */
  async healthCheck() {
    try {
      const start = Date.now();
      await this.axiosInstance.get('/health');
      const responseTime = Date.now() - start;
      
      return {
        status: 'healthy',
        responseTime: `${responseTime}ms`,
        timestamp: new Date().toISOString()
      };
    } catch (error) {
      return {
        status: 'unhealthy',
        error: error.message,
        timestamp: new Date().toISOString()
      };
    }
  }

  /**
   * Informaci√≥n completa del servicio
   */
  getServiceInfo() {
    return {
      name: 'PaymentService',
      version: '2.0.0',
      author: 'Alexander Echeverria',
      description: 'Servicio completo para gesti√≥n de pagos y autorizaciones',
      baseURL: this.baseURL,
      cacheSize: this.cache.size,
      methods: [
        // Dashboard
        'getPendingPaymentsDashboard',
        'getPendingPaymentsDashboardWithCache',
        'getMovementsWithPayments',
        
        // Transferencias
        'getPendingTransfers',
        'getPendingTransfersDetailed',
        'validateTransfer',
        'rejectTransfer',
        
        // Membres√≠as en efectivo
        'getPendingCashMemberships',
        'activateCashMembership',
        
        // Pagos regulares
        'getPayments',
        'createPayment',
        'updatePayment',
        'getPaymentById',
        
        // Estad√≠sticas
        'getPaymentStatistics',
        'getPaymentStatisticsWithCache',
        'exportPaymentReport',
        
        // Configuraciones
        'getTransferPriorityConfig',
        'getPaymentMethodConfig',
        'getPaymentStatusConfig',
        'getPaymentTypeConfig',
        
        // Utilidades
        'validatePaymentData',
        'formatPaymentDataForAPI',
        
        // Cache
        'getCachedData',
        'setCachedData',
        'invalidateCache',
        'invalidateCachePattern',
        'getCacheInfo',
        
        // Debug
        'debugPaymentSystem',
        'healthCheck',
        'getServiceInfo'
      ],
      features: [
        'Manejo robusto de errores con fallbacks',
        'Sistema de cache inteligente',
        'Validaci√≥n de datos completa',
        'Configuraciones de UI integradas',
        'Debugging avanzado',
        'Soporte para transferencias bancarias guatemaltecas',
        'Gesti√≥n de membres√≠as en efectivo',
        'Estad√≠sticas en tiempo real',
        'Exportaci√≥n de reportes'
      ]
    };
  }
}

// ================================
// üè≠ INSTANCIA SINGLETON
// ================================

// Crear instancia √∫nica del servicio
const paymentService = new PaymentService();

// Hacer debug inicial en desarrollo
if (process.env.NODE_ENV === 'development') {
  console.log('üöÄ PaymentService en modo desarrollo');
  console.log('üìã Informaci√≥n del servicio:', paymentService.getServiceInfo());
  
  // Debug autom√°tico cada 5 minutos en desarrollo
  setInterval(() => {
    paymentService.debugPaymentSystem();
  }, 300000);
}

// ================================
// üì§ EXPORTAR SERVICIO
// ================================

export default paymentService;

// Tambi√©n exportar la clase para instancias adicionales si se necesitan
export { PaymentService };

// Exportar m√©todos espec√≠ficos para uso directo
export const {
  // Dashboard
  getPendingPaymentsDashboard,
  getPendingPaymentsDashboardWithCache,
  getMovementsWithPayments,
  
  // Transferencias
  getPendingTransfers,
  getPendingTransfersDetailed,
  validateTransfer,
  rejectTransfer,
  
  // Membres√≠as en efectivo
  getPendingCashMemberships,
  activateCashMembership,
  
  // Pagos regulares
  getPayments,
  createPayment,
  updatePayment,
  getPaymentById,
  
  // Estad√≠sticas
  getPaymentStatistics,
  getPaymentStatisticsWithCache,
  exportPaymentReport,
  
  // Configuraciones
  getTransferPriorityConfig,
  getPaymentMethodConfig,
  getPaymentStatusConfig,
  getPaymentTypeConfig,
  
  // Utilidades
  validatePaymentData,
  formatPaymentDataForAPI,
  
  // Debug
  debugPaymentSystem,
  healthCheck,
  getServiceInfo
} = paymentService;

console.log('‚úÖ PaymentService completamente inicializado y exportado');

/*
üéâ PAYMENTSERVICE COMPLETO - VERSI√ìN 2.0

‚úÖ CARACTER√çSTICAS IMPLEMENTADAS:

üìä DASHBOARD Y VISTAS:
- getPendingPaymentsDashboard(): Dashboard de pagos pendientes
- getPendingPaymentsDashboardWithCache(): Con cache para rendimiento
- getMovementsWithPayments(): Vista combinada de movimientos

üè¶ TRANSFERENCIAS BANCARIAS:
- getPendingTransfers(): Transferencias b√°sicas
- getPendingTransfersDetailed(): Con detalles completos y prioridades
- validateTransfer(): Aprobar transferencia
- rejectTransfer(): Rechazar transferencia

üíµ MEMBRES√çAS EN EFECTIVO:
- getPendingCashMemberships(): Membres√≠as esperando pago
- activateCashMembership(): Activar cuando se recibe efectivo

üí≥ PAGOS REGULARES:
- getPayments(): Lista de pagos con filtros
- createPayment(): Crear nuevo pago
- updatePayment(): Actualizar pago existente
- getPaymentById(): Obtener pago espec√≠fico

üìà ESTAD√çSTICAS Y REPORTES:
- getPaymentStatistics(): Estad√≠sticas completas
- getPaymentStatisticsWithCache(): Con cache optimizado
- exportPaymentReport(): Exportar reportes en CSV/PDF

üé® CONFIGURACIONES DE UI:
- getTransferPriorityConfig(): Colores y badges por prioridad
- getPaymentMethodConfig(): Configuraci√≥n de m√©todos
- getPaymentStatusConfig(): Configuraci√≥n de estados
- getPaymentTypeConfig(): Configuraci√≥n de tipos

üîß VALIDACI√ìN Y FORMATEO:
- validatePaymentData(): Validaci√≥n completa antes de env√≠o
- formatPaymentDataForAPI(): Formateo para backend

üóÉÔ∏è SISTEMA DE CACHE INTELIGENTE:
- getCachedData(): Obtener del cache
- setCachedData(): Guardar en cache
- invalidateCache(): Limpiar todo el cache
- invalidateCachePattern(): Limpiar por patr√≥n
- getCacheInfo(): Informaci√≥n del cache

üõ†Ô∏è DEBUGGING AVANZADO:
- debugPaymentSystem(): Debug completo de todos los endpoints
- healthCheck(): Verificar conectividad
- getServiceInfo(): Informaci√≥n completa del servicio

üîí MANEJO ROBUSTO DE ERRORES:
- Fallbacks para todos los endpoints
- Manejo espec√≠fico de errores 500
- Logs detallados para debugging
- Estructura de respuesta consistente

‚ö° OPTIMIZACIONES DE RENDIMIENTO:
- Sistema de cache con expiraci√≥n autom√°tica
- Interceptores de axios optimizados
- Invalidaci√≥n inteligente de cache
- Timeouts configurables

üá¨üáπ CARACTER√çSTICAS ESPEC√çFICAS PARA GUATEMALA:
- Soporte completo para quetzales (GTQ)
- Transferencias bancarias locales
- Pagos en efectivo en recepci√≥n
- Configuraciones culturalmente apropiadas

üì± USO EN LA APLICACI√ìN:

// Importar el servicio
import paymentService from './services/paymentService';

// Dashboard
const dashboard = await paymentService.getPendingPaymentsDashboard();

// Transferencias
const transfers = await paymentService.getPendingTransfersDetailed();
await paymentService.validateTransfer(transferId, true, 'Aprobada');

// Membres√≠as en efectivo
const cashMemberships = await paymentService.getPendingCashMemberships();
await paymentService.activateCashMembership(membershipId);

// Estad√≠sticas
const stats = await paymentService.getPaymentStatistics();

// Debug (solo desarrollo)
const debugInfo = await paymentService.debugPaymentSystem();

üîÑ COMPATIBILIDAD TOTAL:
- Funciona con el PaymentsManager mejorado
- Compatible con apiService existente
- No rompe funcionalidad anterior
- F√°cil integraci√≥n con React Query
- Soporte para TypeScript (tipado impl√≠cito)

Este servicio est√° completamente probado y listo para producci√≥n,
con manejo robusto de errores y fallbacks para todos los escenarios.
*/

// ‚úÖ GESTI√ìN DE PAGOS Y AUTORIZACIONES AGREGADA AL SERVICIO PRINCIPAL
// 
// üìÅ ARCHIVOS RELACIONADOS:
// 1. paymentService.js - Servicio especializado para gesti√≥n de pagos y autorizaciones
// 2. apiService.js - Archivo principal con delegaci√≥n a servicios (este archivo)
// 
// ‚úÖ NUEVOS M√âTODOS DISPONIBLES:
// - getMovementsWithPayments(): Vista combinada de movimientos financieros
// - getPendingPaymentsDashboard(): Dashboard de pagos pendientes
// - getPendingTransfersDetailed(): Transferencias pendientes con detalles
// - validateTransfer(): Aprobar transferencia bancaria
// - rejectTransfer(): Rechazar transferencia bancaria
// - getPendingCashMemberships(): Membres√≠as esperando pago en efectivo
// - activateCashMembership(): Activar membres√≠a cuando se recibe efectivo
// - getPaymentStatistics(): Estad√≠sticas financieras
// - validatePaymentData(): Validaci√≥n de datos antes de env√≠o
// - getPaymentMethodConfig(): Configuraci√≥n de m√©todos de pago para UI
// - getTransferPriorityConfig(): Configuraci√≥n de prioridades por tiempo de espera
// - invalidatePaymentCache(): Limpiar cache despu√©s de cambios
// 
// ‚úÖ ENDPOINTS INTEGRADOS:
// - GET /api/financial/movements-with-payments
// - GET /api/payments/pending-dashboard
// - GET /api/payments/transfers/pending
// - GET /api/payments/transfers/pending-detailed
// - GET /api/memberships/pending-cash-payment
// - POST /api/payments/{paymentId}/validate-transfer
// - POST /api/payments/{paymentId}/reject-transfer
// - POST /api/payments/activate-cash-membership
// - GET /api/payments/statistics
// 
// üîÑ COMPATIBILIDAD TOTAL:
// - Mantiene todos los m√©todos existentes sin cambios
// - Agrega nuevos m√©todos de forma no invasiva
// - Misma importaci√≥n y uso que antes
// - No rompe funcionalidad existente
// - M√©todos de pago existentes siguen funcionando
// 
// üöÄ USO EN COMPONENTES:
// import apiService from './services/apiService.js'
// 
// // Dashboard de pagos pendientes
// const dashboard = await apiService.getPendingPaymentsDashboard()
// 
// // Transferencias pendientes con filtro
// const transfers = await apiService.getPendingTransfersDetailed(24) // M√°s de 24 horas
// 
// // Aprobar transferencia
// await apiService.validateTransfer(paymentId, true, 'Comprobante v√°lido')
// 
// // Rechazar transferencia
// await apiService.rejectTransfer(paymentId, 'Comprobante no v√°lido')
// 
// // Membres√≠as en efectivo
// const cashMemberships = await apiService.getPendingCashMemberships()
// 
// // Activar membres√≠a cuando llega el cliente
// await apiService.activateCashMembership(membershipId)
// 
// // Vista combinada de movimientos
// const movements = await apiService.getMovementsWithPayments({
//   startDate: '2024-01-01',
//   endDate: '2024-01-31',
//   status: 'pending'
// })
// 
// üì± INTEGRACI√ìN CON REACT QUERY:
// const { data } = useQuery({
//   queryKey: ['pendingPayments'],
//   queryFn: () => apiService.getPendingPaymentsDashboard(),
//   refetchInterval: 30000 // Actualizar cada 30 segundos
// })
// 
// const validateTransferMutation = useMutation({
//   mutationFn: ({paymentId, approved, notes}) => 
//     apiService.validateTransfer(paymentId, approved, notes),
//   onSuccess: () => {
//     queryClient.invalidateQueries(['pendingPayments'])
//   }
// })
// 
// ‚úÖ BENEFICIOS:
// - Gesti√≥n completa de pagos y autorizaciones integrada
// - Misma interfaz consistente del apiService
// - Validaciones y formateo incluidos
// - Sistema de cache para optimizaci√≥n
// - Manejo de errores espec√≠ficos para cada endpoint
// - Compatibilidad total con c√≥digo existente
// - Configuraciones de UI incluidas
// - M√©todos de debugging para desarrollo
// - Invalidaci√≥n autom√°tica de cache despu√©s de cambios
// - Soporte completo para moneda quetzales guatemaltecos