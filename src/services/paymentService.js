// src/services/paymentService.js
// SERVICIO ESPECIALIZADO PARA GESTI√ìN DE PAGOS Y AUTORIZACIONES

import { BaseService } from './baseService.js';

// ================================
// üí∞ SERVICIO DE GESTI√ìN DE PAGOS
// ================================
export class PaymentService extends BaseService {
  constructor() {
    super();
    this.cache = new Map(); // Cache para optimizar peticiones
    this.cacheMaxAge = 30000; // 30 segundos por defecto
  }

  // ================================
  // üìä DASHBOARD: VISTA COMBINADA
  // ================================

  /**
   * Obtiene vista combinada de movimientos financieros
   * @param {Object} params - Par√°metros de filtrado
   * @returns {Promise<Object>} Vista combinada de movimientos
   */
  async getMovementsWithPayments(params = {}) {
    try {
      const response = await this.get('/financial/movements-with-payments', params);
      return response;
    } catch (error) {
      console.error('Error al obtener movimientos con pagos:', error);
      throw this.handleApiError(error, 'No se pudieron obtener los movimientos financieros');
    }
  }

  /**
   * Dashboard de pagos pendientes
   * @returns {Promise<Object>} Resumen de pagos pendientes
   */
  async getPendingPaymentsDashboard() {
    try {
      const response = await this.get('/payments/pending-dashboard');
      return response;
    } catch (error) {
      console.error('Error al obtener dashboard de pagos:', error);
      throw this.handleApiError(error, 'No se pudo obtener el dashboard de pagos pendientes');
    }
  }

  /**
   * Dashboard con cache para mejor rendimiento
   * @param {number} maxAge - Tiempo m√°ximo de cache en milisegundos
   * @returns {Promise<Object>} Dashboard cacheado
   */
  async getPendingPaymentsDashboardWithCache(maxAge = 30000) {
    const cacheKey = 'pending-payments-dashboard';
    const cached = this.getCachedData(cacheKey, maxAge);
    
    if (cached) {
      return cached;
    }

    const data = await this.getPendingPaymentsDashboard();
    this.setCachedData(cacheKey, data);
    return data;
  }

  // ================================
  // üè¶ TRANSFERENCIAS BANCARIAS
  // ================================

  /**
   * Obtiene transferencias pendientes
   * @param {boolean} detailed - Si incluir detalles adicionales
   * @param {number} hoursFilter - Filtro por horas de espera
   * @returns {Promise<Object>} Lista de transferencias pendientes
   */
  async getPendingTransfers(detailed = false, hoursFilter = null) {
    try {
      const endpoint = detailed ? '/payments/transfers/pending-detailed' : '/payments/transfers/pending';
      const params = hoursFilter ? { hours: hoursFilter } : {};
      
      const response = await this.get(endpoint, params);
      return response;
    } catch (error) {
      console.error('Error al obtener transferencias pendientes:', error);
      throw this.handleApiError(error, 'No se pudieron obtener las transferencias pendientes');
    }
  }

  /**
   * Valida una transferencia bancaria
   * @param {string} paymentId - ID del pago
   * @param {boolean} approved - Si se aprueba o rechaza
   * @param {string} notes - Notas adicionales
   * @returns {Promise<Object>} Resultado de la validaci√≥n
   */
  async validateTransfer(paymentId, approved, notes = '') {
    try {
      const response = await this.post(`/payments/${paymentId}/validate-transfer`, {
        approved,
        notes
      });
      
      // Invalidar cache despu√©s del cambio
      this.invalidateCache();
      
      return response;
    } catch (error) {
      console.error('Error al validar transferencia:', error);
      throw this.handleApiError(error, 'No se pudo validar la transferencia');
    }
  }

  /**
   * Rechaza una transferencia bancaria
   * @param {string} paymentId - ID del pago
   * @param {string} reason - Motivo del rechazo
   * @returns {Promise<Object>} Resultado del rechazo
   */
  async rejectTransfer(paymentId, reason) {
    try {
      const response = await this.post(`/payments/${paymentId}/reject-transfer`, {
        reason
      });
      
      // Invalidar cache despu√©s del cambio
      this.invalidateCache();
      
      return response;
    } catch (error) {
      console.error('Error al rechazar transferencia:', error);
      throw this.handleApiError(error, 'No se pudo rechazar la transferencia');
    }
  }

  // ================================
  // üíµ MEMBRES√çAS EN EFECTIVO
  // ================================

  /**
   * Obtiene membres√≠as pendientes de pago en efectivo
   * @returns {Promise<Object>} Lista de membres√≠as pendientes
   */
  async getPendingCashMemberships() {
    try {
      const response = await this.get('/memberships/pending-cash-payment');
      return response;
    } catch (error) {
      console.error('Error al obtener membres√≠as en efectivo pendientes:', error);
      throw this.handleApiError(error, 'No se pudieron obtener las membres√≠as pendientes');
    }
  }

  /**
   * Activa una membres√≠a cuando se recibe el pago en efectivo
   * @param {string} membershipId - ID de la membres√≠a
   * @returns {Promise<Object>} Resultado de la activaci√≥n
   */
  async activateCashMembership(membershipId) {
    try {
      const response = await this.post('/payments/activate-cash-membership', {
        membership_id: membershipId
      });
      
      // Invalidar cache despu√©s del cambio
      this.invalidateCache();
      
      return response;
    } catch (error) {
      console.error('Error al activar membres√≠a en efectivo:', error);
      throw this.handleApiError(error, 'No se pudo activar la membres√≠a');
    }
  }

  // ================================
  // üìà ESTAD√çSTICAS Y REPORTES
  // ================================

  /**
   * Obtiene estad√≠sticas de pagos
   * @param {Object} dateRange - Rango de fechas
   * @returns {Promise<Object>} Estad√≠sticas de pagos
   */
  async getPaymentStats(dateRange = {}) {
    try {
      const response = await this.get('/payments/statistics', dateRange);
      return response;
    } catch (error) {
      console.error('Error al obtener estad√≠sticas de pagos:', error);
      throw this.handleApiError(error, 'No se pudieron obtener las estad√≠sticas');
    }
  }

  // ================================
  // üîß VALIDACI√ìN Y FORMATEO
  // ================================

  /**
   * Valida datos de pago antes del env√≠o
   * @param {Object} paymentData - Datos del pago
   * @returns {Object} Resultado de la validaci√≥n
   */
  validatePaymentData(paymentData) {
    const errors = [];

    if (!paymentData.amount || paymentData.amount <= 0) {
      errors.push('El monto debe ser mayor a 0');
    }

    if (!paymentData.method) {
      errors.push('El m√©todo de pago es requerido');
    }

    if (!paymentData.user_id) {
      errors.push('El ID de usuario es requerido');
    }

    return {
      isValid: errors.length === 0,
      errors
    };
  }

  /**
   * Formatea datos de pago para la API
   * @param {Object} paymentData - Datos del pago
   * @returns {Object} Datos formateados
   */
  formatPaymentDataForAPI(paymentData) {
    return {
      amount: parseFloat(paymentData.amount),
      method: paymentData.method,
      user_id: paymentData.user_id,
      notes: paymentData.notes || '',
      created_at: new Date().toISOString()
    };
  }

  // ================================
  // üé® CONFIGURACIONES DE UI
  // ================================

  /**
   * Configuraci√≥n de prioridad por tiempo de espera
   * @param {number} hoursWaiting - Horas de espera
   * @returns {Object} Configuraci√≥n de prioridad
   */
  getTransferPriorityConfig(hoursWaiting) {
    if (hoursWaiting >= 48) {
      return {
        priority: 'urgent',
        color: 'red',
        badge: 'Urgente',
        icon: 'üö®'
      };
    } else if (hoursWaiting >= 24) {
      return {
        priority: 'high',
        color: 'orange',
        badge: 'Prioridad Alta',
        icon: '‚ö†Ô∏è'
      };
    } else if (hoursWaiting >= 12) {
      return {
        priority: 'medium',
        color: 'yellow',
        badge: 'Prioridad Media',
        icon: '‚è∞'
      };
    }
    
    return {
      priority: 'normal',
      color: 'blue',
      badge: 'Normal',
      icon: 'üìù'
    };
  }

  /**
   * Configuraci√≥n de m√©todos de pago
   * @param {string} method - M√©todo de pago
   * @returns {Object} Configuraci√≥n del m√©todo
   */
  getPaymentMethodConfig(method) {
    const configs = {
      'bank_transfer': {
        name: 'Transferencia Bancaria',
        icon: 'üè¶',
        color: 'blue',
        requiresValidation: true
      },
      'cash': {
        name: 'Efectivo',
        icon: 'üíµ',
        color: 'green',
        requiresValidation: true
      },
      'stripe': {
        name: 'Tarjeta',
        icon: 'üí≥',
        color: 'purple',
        requiresValidation: false
      },
      'paypal': {
        name: 'PayPal',
        icon: 'üì±',
        color: 'blue',
        requiresValidation: false
      }
    };

    return configs[method] || {
      name: method,
      icon: 'üí∞',
      color: 'gray',
      requiresValidation: false
    };
  }

  /**
   * Configuraci√≥n de estados de pago
   * @param {string} status - Estado del pago
   * @returns {Object} Configuraci√≥n del estado
   */
  getPaymentStatusConfig(status) {
    const configs = {
      'pending': {
        name: 'Pendiente',
        color: 'yellow',
        icon: '‚è≥'
      },
      'completed': {
        name: 'Completado',
        color: 'green',
        icon: '‚úÖ'
      },
      'failed': {
        name: 'Fallido',
        color: 'red',
        icon: '‚ùå'
      },
      'cancelled': {
        name: 'Cancelado',
        color: 'gray',
        icon: 'üö´'
      },
      'refunded': {
        name: 'Reembolsado',
        color: 'orange',
        icon: '‚Ü©Ô∏è'
      }
    };

    return configs[status] || {
      name: status,
      color: 'gray',
      icon: '‚ùì'
    };
  }

  // ================================
  // üóÉÔ∏è GESTI√ìN DE CACHE
  // ================================

  /**
   * Obtiene datos del cache
   * @param {string} key - Clave del cache
   * @param {number} maxAge - Tiempo m√°ximo de vida
   * @returns {Object|null} Datos cacheados o null
   */
  getCachedData(key, maxAge = this.cacheMaxAge) {
    const cached = this.cache.get(key);
    
    if (!cached) return null;
    
    const age = Date.now() - cached.timestamp;
    if (age > maxAge) {
      this.cache.delete(key);
      return null;
    }
    
    return cached.data;
  }

  /**
   * Guarda datos en el cache
   * @param {string} key - Clave del cache
   * @param {Object} data - Datos a cachear
   */
  setCachedData(key, data) {
    this.cache.set(key, {
      data,
      timestamp: Date.now()
    });
  }

  /**
   * Invalida todo el cache
   */
  invalidateCache() {
    this.cache.clear();
  }

  // ================================
  // üõ†Ô∏è DEBUGGING (SOLO DESARROLLO)
  // ================================

  /**
   * Debugging del sistema de pagos
   * @returns {Promise<Object>} Informaci√≥n de debug
   */
  async debugPaymentSystem() {
    try {
      const endpoints = [
        '/payments/pending-dashboard',
        '/payments/transfers/pending',
        '/memberships/pending-cash-payment',
        '/payments/statistics'
      ];

      const results = {};

      for (const endpoint of endpoints) {
        try {
          const response = await this.get(endpoint);
          results[endpoint] = {
            status: 'success',
            data: response
          };
        } catch (error) {
          results[endpoint] = {
            status: 'error',
            error: error.message
          };
        }
      }

      return {
        cache_size: this.cache.size,
        cache_keys: Array.from(this.cache.keys()),
        endpoints: results,
        timestamp: new Date().toISOString()
      };

    } catch (error) {
      console.error('Error en debugging del sistema de pagos:', error);
      throw error;
    }
  }
}

// ================================
// üè≠ EXPORTAR CLASE (DEFAULT EXPORT)
// ================================
export default PaymentService;

// ‚úÖ GESTI√ìN DE PAGOS Y AUTORIZACIONES AGREGADA AL SERVICIO PRINCIPAL
// 
// üìÅ ARCHIVOS RELACIONADOS:
// 1. paymentService.js - Servicio especializado para gesti√≥n de pagos y autorizaciones
// 2. apiService.js - Archivo principal con delegaci√≥n a servicios (este archivo)
// 
// ‚úÖ NUEVOS M√âTODOS DISPONIBLES:
// - getMovementsWithPayments(): Vista combinada de movimientos financieros
// - getPendingPaymentsDashboard(): Dashboard de pagos pendientes
// - getPendingTransfersDetailed(): Transferencias pendientes con detalles
// - validateTransfer(): Aprobar transferencia bancaria
// - rejectTransfer(): Rechazar transferencia bancaria
// - getPendingCashMemberships(): Membres√≠as esperando pago en efectivo
// - activateCashMembership(): Activar membres√≠a cuando se recibe efectivo
// - getPaymentStatistics(): Estad√≠sticas financieras
// - validatePaymentData(): Validaci√≥n de datos antes de env√≠o
// - getPaymentMethodConfig(): Configuraci√≥n de m√©todos de pago para UI
// - getTransferPriorityConfig(): Configuraci√≥n de prioridades por tiempo de espera
// - invalidatePaymentCache(): Limpiar cache despu√©s de cambios
// 
// ‚úÖ ENDPOINTS INTEGRADOS:
// - GET /api/financial/movements-with-payments
// - GET /api/payments/pending-dashboard
// - GET /api/payments/transfers/pending
// - GET /api/payments/transfers/pending-detailed
// - GET /api/memberships/pending-cash-payment
// - POST /api/payments/{paymentId}/validate-transfer
// - POST /api/payments/{paymentId}/reject-transfer
// - POST /api/payments/activate-cash-membership
// - GET /api/payments/statistics
// 
// üîÑ COMPATIBILIDAD TOTAL:
// - Mantiene todos los m√©todos existentes sin cambios
// - Agrega nuevos m√©todos de forma no invasiva
// - Misma importaci√≥n y uso que antes
// - No rompe funcionalidad existente
// - M√©todos de pago existentes siguen funcionando
// 
// üöÄ USO EN COMPONENTES:
// import apiService from './services/apiService.js'
// 
// // Dashboard de pagos pendientes
// const dashboard = await apiService.getPendingPaymentsDashboard()
// 
// // Transferencias pendientes con filtro
// const transfers = await apiService.getPendingTransfersDetailed(24) // M√°s de 24 horas
// 
// // Aprobar transferencia
// await apiService.validateTransfer(paymentId, true, 'Comprobante v√°lido')
// 
// // Rechazar transferencia
// await apiService.rejectTransfer(paymentId, 'Comprobante no v√°lido')
// 
// // Membres√≠as en efectivo
// const cashMemberships = await apiService.getPendingCashMemberships()
// 
// // Activar membres√≠a cuando llega el cliente
// await apiService.activateCashMembership(membershipId)
// 
// // Vista combinada de movimientos
// const movements = await apiService.getMovementsWithPayments({
//   startDate: '2024-01-01',
//   endDate: '2024-01-31',
//   status: 'pending'
// })
// 
// üì± INTEGRACI√ìN CON REACT QUERY:
// const { data } = useQuery({
//   queryKey: ['pendingPayments'],
//   queryFn: () => apiService.getPendingPaymentsDashboard(),
//   refetchInterval: 30000 // Actualizar cada 30 segundos
// })
// 
// const validateTransferMutation = useMutation({
//   mutationFn: ({paymentId, approved, notes}) => 
//     apiService.validateTransfer(paymentId, approved, notes),
//   onSuccess: () => {
//     queryClient.invalidateQueries(['pendingPayments'])
//   }
// })
// 
// ‚úÖ BENEFICIOS:
// - Gesti√≥n completa de pagos y autorizaciones integrada
// - Misma interfaz consistente del apiService
// - Validaciones y formateo incluidos
// - Sistema de cache para optimizaci√≥n
// - Manejo de errores espec√≠ficos para cada endpoint
// - Compatibilidad total con c√≥digo existente
// - Configuraciones de UI incluidas
// - M√©todos de debugging para desarrollo
// - Invalidaci√≥n autom√°tica de cache despu√©s de cambios
// - Soporte completo para moneda quetzales guatemaltecos