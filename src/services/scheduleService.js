// src/services/scheduleService.js
// SERVICIO OPTIMIZADO: Funcionalidad esencial sin redundancias

import { BaseService } from './baseService.js';

class ScheduleService extends BaseService {
  constructor() {
    super();
    this.cache = new Map();
    this.cacheTimeout = 5 * 60 * 1000; // 5 minutos
  }

  // ================================
  // üìÖ M√âTODOS PRINCIPALES - CORE FUNCTIONALITY
  // ================================

  // OBTENER: Horarios actuales del cliente autenticado
  async getCurrentSchedule() {
    try {
      console.log('üìÖ ScheduleService: Obteniendo horarios actuales...');
      
      const response = await this.get('/memberships/my-schedule');
      console.log('üìã ScheduleService: Respuesta del backend:', response);
      
      // El backend ya devuelve los datos procesados seg√∫n documentaci√≥n
      if (response?.success && response.data) {
        console.log('‚úÖ ScheduleService: Datos recibidos correctamente');
        return response.data;
      }
      
      // Usuario sin membres√≠a
      if (response?.success === false || !response?.data?.hasMembership) {
        console.log('‚ÑπÔ∏è ScheduleService: Usuario sin membres√≠a activa');
        return this.getEmptyScheduleStructure();
      }
      
      throw new Error('Formato de respuesta inesperado del backend');
      
    } catch (error) {
      console.error('‚ùå ScheduleService: Error obteniendo horarios:', error);
      
      if (error.response?.status === 404) {
        return this.getEmptyScheduleStructure();
      }
      
      throw error;
    }
  }

  // OBTENER: Opciones de horarios disponibles para reservar
  async getAvailableOptions(day = null) {
    try {
      console.log('üîç ScheduleService: Obteniendo opciones disponibles...', { day });
      
      const params = day ? { day } : {};
      const response = await this.get('/memberships/my-schedule/available-options', { params });
      
      if (response?.success && response.data) {
        console.log('‚úÖ ScheduleService: Opciones disponibles obtenidas');
        return response.data;
      }
      
      throw new Error('Error obteniendo opciones disponibles del backend');
      
    } catch (error) {
      console.error('‚ùå ScheduleService: Error obteniendo opciones:', error);
      throw error;
    }
  }

  // CAMBIAR: Horarios seleccionados del cliente
  async changeSchedule(changes) {
    try {
      console.log('‚úèÔ∏è ScheduleService: Cambiando horarios...');
      
      const cleanedChanges = this.validateAndCleanChanges(changes);
      const changeType = this.determineChangeType(cleanedChanges);
      
      const payload = {
        changeType,
        changes: cleanedChanges,
        replaceAll: false
      };
      
      console.log('üì¶ ScheduleService: Payload:', payload);
      
      const response = await this.post('/memberships/my-schedule/change', payload);
      
      if (response?.success) {
        console.log('‚úÖ ScheduleService: Horarios cambiados exitosamente');
        this.invalidateCache();
        return response.data;
      }
      
      throw new Error(response?.message || 'Error cambiando horarios');
      
    } catch (error) {
      console.error('‚ùå ScheduleService: Error cambiando horarios:', error);
      
      // Manejo espec√≠fico de slots no disponibles
      if (error.response?.data?.unavailableSlots) {
        const enhancedError = new Error(error.message || 'Algunos horarios ya no est√°n disponibles');
        enhancedError.unavailableSlots = error.response.data.unavailableSlots;
        throw enhancedError;
      }
      
      throw error;
    }
  }

  // CANCELAR: Horario espec√≠fico por d√≠a y slot ID
  async cancelSlot(day, slotId) {
    try {
      console.log(`üóëÔ∏è ScheduleService: Cancelando horario ${day}/${slotId}...`);
      
      if (!day || !slotId) {
        throw new Error('D√≠a y ID de slot son requeridos para cancelar');
      }
      
      const validSlotId = this.extractSlotId(slotId);
      if (!validSlotId) {
        throw new Error(`ID de slot inv√°lido: ${slotId}`);
      }
      
      const response = await this.delete(`/memberships/my-schedule/${day}/${validSlotId}`);
      
      if (response?.success) {
        console.log('‚úÖ ScheduleService: Horario cancelado exitosamente');
        this.invalidateCache();
        return response.data;
      }
      
      throw new Error(response?.message || 'Error cancelando horario');
      
    } catch (error) {
      console.error('‚ùå ScheduleService: Error cancelando horario:', error);
      throw error;
    }
  }

  // OBTENER: Estad√≠sticas de uso de horarios
  async getScheduleStats() {
    try {
      console.log('üìä ScheduleService: Obteniendo estad√≠sticas...');
      
      const response = await this.get('/memberships/my-schedule/stats');
      
      if (response?.success && response.data) {
        console.log('‚úÖ ScheduleService: Estad√≠sticas obtenidas');
        return response.data;
      }
      
      throw new Error('Error obteniendo estad√≠sticas de horarios');
      
    } catch (error) {
      console.error('‚ùå ScheduleService: Error obteniendo estad√≠sticas:', error);
      
      if (error.response?.status === 404) {
        console.log('üìä ScheduleService: Backend sin estad√≠sticas, usando fallback');
        return this.getEmptyStats();
      }
      
      throw error;
    }
  }

  // PREVISUALIZAR: Cambios de horarios antes de confirmar
  async previewChanges(changes) {
    try {
      console.log('üëÅÔ∏è ScheduleService: Previsualizando cambios...');
      
      const cleanedChanges = this.validateAndCleanChanges(changes);
      
      const response = await this.post('/memberships/my-schedule/preview-change', {
        changes: cleanedChanges
      });
      
      if (response?.success && response.data) {
        console.log('‚úÖ ScheduleService: Vista previa generada');
        return response.data;
      }
      
      throw new Error('Error generando vista previa');
      
    } catch (error) {
      console.error('‚ùå ScheduleService: Error en vista previa:', error);
      throw error;
    }
  }

  // ================================
  // üõ†Ô∏è M√âTODOS DE VALIDACI√ìN Y HELPERS
  // ================================

  extractSlotId(slot) {
    if (typeof slot === 'number') {
      return slot > 0 ? slot : null;
    }
    
    if (typeof slot === 'string') {
      const parsed = parseInt(slot);
      return !isNaN(parsed) && parsed > 0 ? parsed : null;
    }
    
    if (typeof slot === 'object' && slot) {
      const id = slot.slotId || slot.id;
      return this.extractSlotId(id);
    }
    
    return null;
  }

  validateAndCleanChanges(changes) {
    console.log('üîç ScheduleService: Validando cambios...');
    
    if (!changes || typeof changes !== 'object') {
      throw new Error('Los cambios deben ser un objeto v√°lido');
    }

    if (Object.keys(changes).length === 0) {
      throw new Error('Debe especificar al menos un cambio');
    }

    const validDays = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'];
    const cleanedChanges = {};
    
    for (const [day, slots] of Object.entries(changes)) {
      if (!validDays.includes(day.toLowerCase())) {
        console.warn(`‚ö†Ô∏è D√≠a inv√°lido ignorado: ${day}`);
        continue;
      }
      
      if (!Array.isArray(slots)) {
        console.warn(`‚ö†Ô∏è Slots para ${day} no es un array:`, slots);
        continue;
      }
      
      const cleanedSlots = slots
        .map(slot => this.extractSlotId(slot))
        .filter(id => id !== null);
      
      if (cleanedSlots.length === 0) {
        console.warn(`‚ö†Ô∏è No hay slots v√°lidos para ${day}`);
        continue;
      }
      
      cleanedChanges[day] = cleanedSlots;
    }

    if (Object.keys(cleanedChanges).length === 0) {
      throw new Error('No hay cambios v√°lidos para procesar');
    }

    console.log('‚úÖ ScheduleService: Cambios validados');
    return cleanedChanges;
  }

  determineChangeType(changes) {
    const dayCount = Object.keys(changes).length;
    
    if (dayCount === 1) return 'single_day';
    if (dayCount <= 3) return 'multiple_days';
    return 'full_week';
  }

  // ================================
  // üìã ESTRUCTURAS POR DEFECTO
  // ================================

  getEmptyScheduleStructure() {
    const dayNames = {
      monday: 'Lunes',
      tuesday: 'Martes',
      wednesday: 'Mi√©rcoles',
      thursday: 'Jueves',
      friday: 'Viernes',
      saturday: 'S√°bado',
      sunday: 'Domingo'
    };

    const emptySchedule = {};
    Object.entries(dayNames).forEach(([day, dayName]) => {
      emptySchedule[day] = {
        dayName,
        hasSlots: false,
        slots: []
      };
    });

    return {
      hasMembership: false,
      currentSchedule: emptySchedule,
      membership: null,
      canEditSchedule: false,
      totalSlotsReserved: 0
    };
  }

  getEmptyStats() {
    return {
      hasMembership: false,
      stats: {
        totalSlots: 0,
        usedSlots: 0,
        availableSlots: 0,
        favoriteTime: null,
        totalVisits: 0,
        dayDistribution: {}
      }
    };
  }

  // ================================
  // üïí UTILIDADES DE TIEMPO ESENCIALES
  // ================================

  isToday(day) {
    const today = new Date().toLocaleDateString('en-US', { weekday: 'long' }).toLowerCase();
    return day.toLowerCase() === today;
  }

  isPastTime(timeRange) {
    if (!timeRange || timeRange === 'Horario' || timeRange === 'Horario configurado') {
      return false;
    }
    
    try {
      const now = new Date();
      const [startTime] = timeRange.split(' - ');
      const [hours, minutes] = startTime.split(':').map(Number);
      
      const slotTime = new Date();
      slotTime.setHours(hours, minutes, 0, 0);
      
      return now > slotTime;
    } catch (error) {
      console.warn('ScheduleService: Error verificando tiempo pasado:', error);
      return false;
    }
  }

  formatTimeRange(timeRange) {
    if (!timeRange || timeRange === 'Horario' || timeRange === 'Horario configurado') {
      return timeRange;
    }
    
    try {
      const [start, end] = timeRange.split(' - ');
      return `${this.formatTime(start)} - ${this.formatTime(end)}`;
    } catch (error) {
      console.warn('ScheduleService: Error formateando rango de tiempo:', error);
      return timeRange;
    }
  }

  formatTime(time) {
    if (!time) return '';
    
    try {
      const [hours, minutes] = time.split(':');
      const hour = parseInt(hours);
      const period = hour >= 12 ? 'PM' : 'AM';
      const displayHour = hour === 0 ? 12 : hour > 12 ? hour - 12 : hour;
      
      return `${displayHour}:${minutes} ${period}`;
    } catch (error) {
      console.warn('ScheduleService: Error formateando tiempo:', error);
      return time;
    }
  }

  // ================================
  // üéØ M√âTODOS P√öBLICOS PARA UI
  // ================================

  validateChanges(changes) {
    try {
      this.validateAndCleanChanges(changes);
      return true;
    } catch (error) {
      console.error('‚ùå ScheduleService: Validaci√≥n fall√≥:', error.message);
      return false;
    }
  }

  formatScheduleForDisplay(schedule) {
    if (!schedule || !schedule.currentSchedule) {
      console.warn('ScheduleService: No hay datos de horarios para formatear');
      return {};
    }

    const formatted = {};

    Object.entries(schedule.currentSchedule).forEach(([day, dayData]) => {
      formatted[day] = {
        ...dayData,
        formattedSlots: dayData.slots?.map(slot => ({
          ...slot,
          displayTime: this.formatTimeRange(slot.timeRange),
          isToday: this.isToday(day),
          isPast: this.isPastTime(slot.timeRange)
        })) || []
      };
    });

    console.log('‚úÖ ScheduleService: Horarios formateados para visualizaci√≥n');
    return formatted;
  }

  calculateLocalStats(schedule) {
    if (!schedule?.currentSchedule) {
      return null;
    }

    const currentScheduleData = schedule.currentSchedule;
    let totalSlots = 0;
    const dayDistribution = {};
    const allTimes = [];

    Object.entries(currentScheduleData).forEach(([day, dayData]) => {
      const slotsCount = dayData.hasSlots ? dayData.slots.length : 0;
      
      dayDistribution[dayData.dayName] = slotsCount;
      totalSlots += slotsCount;
      
      if (dayData.hasSlots && dayData.slots) {
        allTimes.push(...dayData.slots.map(slot => slot.timeRange));
      }
    });

    const timeFrequency = {};
    allTimes.forEach(time => {
      if (time && time !== 'Horario' && time !== 'Horario configurado') {
        timeFrequency[time] = (timeFrequency[time] || 0) + 1;
      }
    });

    const favoriteTime = Object.keys(timeFrequency).length > 0 ? 
      Object.keys(timeFrequency).reduce((a, b) => 
        timeFrequency[a] > timeFrequency[b] ? a : b
      ) : null;

    const stats = {
      totalSlots,
      usedSlots: totalSlots,
      availableSlots: 0,
      totalVisits: totalSlots * 4,
      favoriteTime,
      dayDistribution
    };

    console.log('üìä ScheduleService: Estad√≠sticas locales calculadas');
    return stats;
  }

  // ================================
  // üíæ GESTI√ìN DE CACHE OPTIMIZADA
  // ================================

  getFromCache(key) {
    const cached = this.cache.get(key);
    if (!cached) return null;
    
    const now = Date.now();
    if (now - cached.timestamp > this.cacheTimeout) {
      this.cache.delete(key);
      return null;
    }
    
    return cached.data;
  }

  setCache(key, data) {
    this.cache.set(key, {
      data,
      timestamp: Date.now()
    });
  }

  invalidateCache() {
    console.log('üóëÔ∏è ScheduleService: Invalidando cache');
    this.cache.clear();
  }

  // ================================
  // üîß M√âTODOS CON CACHE (OPCIONALES)
  // ================================

  async getCurrentScheduleWithCache() {
    const cacheKey = 'currentSchedule';
    const cached = this.getFromCache(cacheKey);
    
    if (cached) {
      console.log('üíæ ScheduleService: Usando horarios desde cache');
      return cached;
    }
    
    const data = await this.getCurrentSchedule();
    this.setCache(cacheKey, data);
    return data;
  }

  async getAvailableOptionsWithCache(day = null) {
    const cacheKey = `availableOptions_${day || 'all'}`;
    const cached = this.getFromCache(cacheKey);
    
    if (cached) {
      console.log('üíæ ScheduleService: Usando opciones desde cache');
      return cached;
    }
    
    const data = await this.getAvailableOptions(day);
    this.setCache(cacheKey, data);
    return data;
  }
}

// Exportar instancia singleton
const scheduleService = new ScheduleService();
export default scheduleService;
/*
DOCUMENTACI√ìN DEL SERVICIO ScheduleService

PROP√ìSITO:
Servicio especializado para la gesti√≥n completa de horarios de clientes del gimnasio.
Maneja todas las operaciones relacionadas con visualizaci√≥n, modificaci√≥n y cancelaci√≥n
de horarios personales de los clientes con membres√≠a activa.

ENDPOINTS UTILIZADOS:
- GET /api/memberships/my-schedule: Obtener horarios actuales del cliente
- GET /api/memberships/my-schedule/available-options: Ver opciones disponibles
- POST /api/memberships/my-schedule/change: Modificar horarios seleccionados
- DELETE /api/memberships/my-schedule/{day}/{slotId}: Cancelar horario espec√≠fico
- GET /api/memberships/my-schedule/stats: Estad√≠sticas de uso de horarios
- POST /api/memberships/my-schedule/preview-change: Vista previa de cambios

FUNCIONALIDADES PRINCIPALES:
1. Obtenci√≥n de horarios actuales con formato estructurado
2. Exploraci√≥n de opciones de horarios disponibles por d√≠a
3. Modificaci√≥n de horarios con validaci√≥n de disponibilidad
4. Cancelaci√≥n de slots espec√≠ficos con confirmaci√≥n
5. Estad√≠sticas de uso y patrones de reserva
6. Vista previa de cambios antes de confirmar
7. Validaci√≥n de datos antes de env√≠o
8. Formateo de horarios para visualizaci√≥n
9. Sistema de cache para optimizar peticiones
10. Manejo de errores espec√≠ficos por operaci√≥n

TIPOS DE CAMBIO SOPORTADOS:
- single_day: Cambios en un solo d√≠a de la semana
- multiple_days: Cambios en 2-3 d√≠as de la semana  
- full_week: Cambios completos de horario semanal

VALIDACIONES INCLUIDAS:
- Verificaci√≥n de formato de cambios
- Validaci√≥n de d√≠as de la semana v√°lidos
- Verificaci√≥n de arrays de slots
- Confirmaci√≥n de disponibilidad en tiempo real
- Manejo de conflictos de horarios

UTILIDADES DE FORMATO:
- Conversi√≥n de horarios 24h a 12h con AM/PM
- Traducci√≥n de d√≠as de ingl√©s a espa√±ol
- Identificaci√≥n de d√≠a actual y horarios pasados
- C√°lculo de estad√≠sticas locales
- Formateo de rangos de tiempo legibles

SISTEMA DE CACHE:
- Cache inteligente con timeout de 2 minutos
- Invalidaci√≥n autom√°tica despu√©s de cambios
- M√©todos con cache para operaciones frecuentes
- Reducci√≥n de peticiones repetidas al servidor

MANEJO DE ERRORES:
- Errores espec√≠ficos por tipo de operaci√≥n
- Fallbacks para endpoints no disponibles
- Manejo de usuarios sin membres√≠a
- Respuestas con informaci√≥n de conflictos

INTEGRACI√ìN:
- Extiende BaseService para funcionalidad HTTP b√°sica
- Compatible con sistema de autenticaci√≥n existente
- Integrable con React Query para estado global
- Soporte para componentes de UI especializados

Este servicio es esencial para la experiencia de gesti√≥n de horarios de clientes,
proporcionando una interfaz robusta y eficiente para todas las operaciones
relacionadas con la reserva y administraci√≥n de slots de tiempo en el gimnasio.
*/