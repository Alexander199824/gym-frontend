// src/services/scheduleService.js
// SERVICIO ESPECIALIZADO PARA GESTI√ìN DE HORARIOS DE CLIENTES

import { BaseService } from './baseService.js';

class ScheduleService extends BaseService {
  constructor() {
    super();
    this.baseScheduleURL = '/api/memberships/my-schedule';
  }

  // ================================
  // üìÖ OBTENER HORARIOS ACTUALES DEL CLIENTE
  // ================================
  async getCurrentSchedule() {
    try {
      console.log('üìÖ Obteniendo horarios actuales del cliente...');
      
      const response = await this.get(this.baseScheduleURL);
      
      if (response?.success && response.data) {
        console.log('‚úÖ Horarios actuales obtenidos:', response.data);
        return response.data;
      }
      
      throw new Error('Error obteniendo horarios actuales');
      
    } catch (error) {
      console.error('‚ùå Error obteniendo horarios actuales:', error);
      
      if (error.response?.status === 404) {
        // Usuario sin membres√≠a o sin horarios
        return {
          hasMembership: false,
          currentSchedule: {},
          membership: null
        };
      }
      
      throw error;
    }
  }

  // ================================
  // üîç OBTENER OPCIONES DE HORARIOS DISPONIBLES
  // ================================
  async getAvailableOptions(day = null) {
    try {
      console.log('üîç Obteniendo opciones de horarios disponibles...');
      
      const params = day ? { day } : {};
      const url = `${this.baseScheduleURL}/available-options`;
      
      const response = await this.get(url, { params });
      
      if (response?.success && response.data) {
        console.log('‚úÖ Opciones disponibles obtenidas:', response.data);
        return response.data;
      }
      
      throw new Error('Error obteniendo opciones disponibles');
      
    } catch (error) {
      console.error('‚ùå Error obteniendo opciones disponibles:', error);
      throw error;
    }
  }

  // ================================
  // ‚úèÔ∏è CAMBIAR HORARIOS SELECCIONADOS
  // ================================
  async changeSchedule(changes) {
    try {
      console.log('‚úèÔ∏è Cambiando horarios del cliente...');
      console.log('üì§ Cambios a aplicar:', changes);
      
      // Determinar tipo de cambio
      const changeType = Object.keys(changes).length === 1 ? 
        'single_day' : 
        Object.keys(changes).length <= 3 ? 'multiple_days' : 'full_week';
      
      const payload = {
        changeType,
        changes
      };
      
      const response = await this.post(`${this.baseScheduleURL}/change`, payload);
      
      if (response?.success) {
        console.log('‚úÖ Horarios cambiados exitosamente:', response.data);
        return response.data;
      }
      
      throw new Error(response?.message || 'Error cambiando horarios');
      
    } catch (error) {
      console.error('‚ùå Error cambiando horarios:', error);
      
      // Manejo espec√≠fico de errores de disponibilidad
      if (error.response?.data?.unavailableSlots) {
        throw {
          ...error,
          unavailableSlots: error.response.data.unavailableSlots
        };
      }
      
      throw error;
    }
  }

  // ================================
  // üóëÔ∏è CANCELAR HORARIO ESPEC√çFICO
  // ================================
  async cancelSlot(day, slotId) {
    try {
      console.log(`üóëÔ∏è Cancelando horario ${day}/${slotId}...`);
      
      const response = await this.delete(`${this.baseScheduleURL}/${day}/${slotId}`);
      
      if (response?.success) {
        console.log('‚úÖ Horario cancelado exitosamente');
        return response.data;
      }
      
      throw new Error(response?.message || 'Error cancelando horario');
      
    } catch (error) {
      console.error('‚ùå Error cancelando horario:', error);
      throw error;
    }
  }

  // ================================
  // üìä OBTENER ESTAD√çSTICAS DE HORARIOS
  // ================================
  async getScheduleStats() {
    try {
      console.log('üìä Obteniendo estad√≠sticas de horarios...');
      
      const response = await this.get(`${this.baseScheduleURL}/stats`);
      
      if (response?.success && response.data) {
        console.log('‚úÖ Estad√≠sticas obtenidas:', response.data);
        return response.data;
      }
      
      throw new Error('Error obteniendo estad√≠sticas');
      
    } catch (error) {
      console.error('‚ùå Error obteniendo estad√≠sticas:', error);
      
      if (error.response?.status === 404) {
        // Fallback con estad√≠sticas vac√≠as
        return {
          totalSlots: 0,
          usedSlots: 0,
          availableSlots: 0,
          favoriteTime: null,
          totalVisits: 0
        };
      }
      
      throw error;
    }
  }

  // ================================
  // üëÅÔ∏è PREVISUALIZAR CAMBIOS DE HORARIOS
  // ================================
  async previewChanges(changes) {
    try {
      console.log('üëÅÔ∏è Previsualizando cambios de horarios...');
      
      const response = await this.post(`${this.baseScheduleURL}/preview-change`, {
        changes
      });
      
      if (response?.success && response.data) {
        console.log('‚úÖ Vista previa generada:', response.data);
        return response.data;
      }
      
      throw new Error('Error generando vista previa');
      
    } catch (error) {
      console.error('‚ùå Error en vista previa:', error);
      throw error;
    }
  }

  // ================================
  // üì± HELPERS Y UTILIDADES
  // ================================

  // Validar cambios antes de enviar
  validateChanges(changes) {
    if (!changes || typeof changes !== 'object') {
      throw new Error('Los cambios deben ser un objeto v√°lido');
    }

    if (Object.keys(changes).length === 0) {
      throw new Error('Debe especificar al menos un cambio');
    }

    const validDays = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'];
    
    for (const [day, slots] of Object.entries(changes)) {
      if (!validDays.includes(day)) {
        throw new Error(`D√≠a inv√°lido: ${day}`);
      }
      
      if (!Array.isArray(slots)) {
        throw new Error(`Los slots para ${day} deben ser un array`);
      }
      
      if (slots.length === 0) {
        throw new Error(`Debe especificar al menos un slot para ${day}`);
      }
    }

    return true;
  }

  // Formatear horarios para mostrar
  formatScheduleForDisplay(schedule) {
    if (!schedule || !schedule.currentSchedule) {
      return {};
    }

    const formatted = {};
    const dayNames = {
      monday: 'Lunes',
      tuesday: 'Martes', 
      wednesday: 'Mi√©rcoles',
      thursday: 'Jueves',
      friday: 'Viernes',
      saturday: 'S√°bado',
      sunday: 'Domingo'
    };

    for (const [day, dayData] of Object.entries(schedule.currentSchedule)) {
      formatted[day] = {
        ...dayData,
        dayName: dayNames[day] || day,
        formattedSlots: dayData.slots?.map(slot => ({
          ...slot,
          displayTime: this.formatTimeRange(slot.timeRange),
          isToday: this.isToday(day),
          isPast: this.isPastTime(slot.timeRange)
        })) || []
      };
    }

    return formatted;
  }

  // Verificar si es el d√≠a actual
  isToday(day) {
    const today = new Date().toLocaleDateString('en-US', { weekday: 'long' }).toLowerCase();
    return day === today;
  }

  // Verificar si el horario ya pas√≥
  isPastTime(timeRange) {
    if (!timeRange) return false;
    
    try {
      const now = new Date();
      const [startTime] = timeRange.split(' - ');
      const [hours, minutes] = startTime.split(':').map(Number);
      
      const slotTime = new Date();
      slotTime.setHours(hours, minutes, 0, 0);
      
      return now > slotTime;
    } catch (error) {
      return false;
    }
  }

  // Formatear rango de tiempo
  formatTimeRange(timeRange) {
    if (!timeRange) return '';
    
    try {
      const [start, end] = timeRange.split(' - ');
      return `${this.formatTime(start)} - ${this.formatTime(end)}`;
    } catch (error) {
      return timeRange;
    }
  }

  // Formatear tiempo individual
  formatTime(time) {
    if (!time) return '';
    
    try {
      const [hours, minutes] = time.split(':');
      const hour = parseInt(hours);
      const period = hour >= 12 ? 'PM' : 'AM';
      const displayHour = hour === 0 ? 12 : hour > 12 ? hour - 12 : hour;
      
      return `${displayHour}:${minutes} ${period}`;
    } catch (error) {
      return time;
    }
  }

  // Calcular estad√≠sticas locales
  calculateLocalStats(schedule) {
    if (!schedule?.currentSchedule) {
      return {
        totalSlots: 0,
        usedSlots: 0,
        availableSlots: 0,
        daysWithSlots: 0
      };
    }

    let totalSlots = 0;
    let usedSlots = 0;
    let daysWithSlots = 0;

    Object.values(schedule.currentSchedule).forEach(dayData => {
      if (dayData.hasSlots && dayData.slots) {
        usedSlots += dayData.slots.length;
        daysWithSlots++;
      }
    });

    // Estimaci√≥n de slots totales (esto depende del plan de membres√≠a)
    totalSlots = usedSlots + (daysWithSlots * 2); // Estimaci√≥n conservadora

    return {
      totalSlots,
      usedSlots,
      availableSlots: totalSlots - usedSlots,
      daysWithSlots
    };
  }

  // ================================
  // üîÑ GESTI√ìN DE ESTADO LOCAL Y CACHE
  // ================================

  // Cache para evitar peticiones repetidas
  _cache = new Map();
  _cacheTimeout = 2 * 60 * 1000; // 2 minutos

  // Obtener del cache
  getFromCache(key) {
    const cached = this._cache.get(key);
    if (!cached) return null;
    
    if (Date.now() - cached.timestamp > this._cacheTimeout) {
      this._cache.delete(key);
      return null;
    }
    
    return cached.data;
  }

  // Guardar en cache
  saveToCache(key, data) {
    this._cache.set(key, {
      data,
      timestamp: Date.now()
    });
  }

  // Limpiar cache
  clearCache() {
    this._cache.clear();
  }

  // M√©todos con cache
  async getCurrentScheduleWithCache() {
    const cacheKey = 'current-schedule';
    const cached = this.getFromCache(cacheKey);
    
    if (cached) {
      console.log('üìÖ Usando horarios desde cache');
      return cached;
    }
    
    const data = await this.getCurrentSchedule();
    this.saveToCache(cacheKey, data);
    return data;
  }

  async getAvailableOptionsWithCache(day = null) {
    const cacheKey = `available-options-${day || 'all'}`;
    const cached = this.getFromCache(cacheKey);
    
    if (cached) {
      console.log('üîç Usando opciones disponibles desde cache');
      return cached;
    }
    
    const data = await this.getAvailableOptions(day);
    this.saveToCache(cacheKey, data);
    return data;
  }

  // Invalidar cache despu√©s de cambios
  invalidateCache() {
    console.log('üîÑ Invalidando cache de horarios');
    this.clearCache();
  }
}

// Exportar instancia singleton
const scheduleService = new ScheduleService();
export default scheduleService;

/*
DOCUMENTACI√ìN DEL SERVICIO ScheduleService

PROP√ìSITO:
Servicio especializado para la gesti√≥n completa de horarios de clientes del gimnasio.
Maneja todas las operaciones relacionadas con visualizaci√≥n, modificaci√≥n y cancelaci√≥n
de horarios personales de los clientes con membres√≠a activa.

ENDPOINTS UTILIZADOS:
- GET /api/memberships/my-schedule: Obtener horarios actuales del cliente
- GET /api/memberships/my-schedule/available-options: Ver opciones disponibles
- POST /api/memberships/my-schedule/change: Modificar horarios seleccionados
- DELETE /api/memberships/my-schedule/{day}/{slotId}: Cancelar horario espec√≠fico
- GET /api/memberships/my-schedule/stats: Estad√≠sticas de uso de horarios
- POST /api/memberships/my-schedule/preview-change: Vista previa de cambios

FUNCIONALIDADES PRINCIPALES:
1. Obtenci√≥n de horarios actuales con formato estructurado
2. Exploraci√≥n de opciones de horarios disponibles por d√≠a
3. Modificaci√≥n de horarios con validaci√≥n de disponibilidad
4. Cancelaci√≥n de slots espec√≠ficos con confirmaci√≥n
5. Estad√≠sticas de uso y patrones de reserva
6. Vista previa de cambios antes de confirmar
7. Validaci√≥n de datos antes de env√≠o
8. Formateo de horarios para visualizaci√≥n
9. Sistema de cache para optimizar peticiones
10. Manejo de errores espec√≠ficos por operaci√≥n

TIPOS DE CAMBIO SOPORTADOS:
- single_day: Cambios en un solo d√≠a de la semana
- multiple_days: Cambios en 2-3 d√≠as de la semana  
- full_week: Cambios completos de horario semanal

VALIDACIONES INCLUIDAS:
- Verificaci√≥n de formato de cambios
- Validaci√≥n de d√≠as de la semana v√°lidos
- Verificaci√≥n de arrays de slots
- Confirmaci√≥n de disponibilidad en tiempo real
- Manejo de conflictos de horarios

UTILIDADES DE FORMATO:
- Conversi√≥n de horarios 24h a 12h con AM/PM
- Traducci√≥n de d√≠as de ingl√©s a espa√±ol
- Identificaci√≥n de d√≠a actual y horarios pasados
- C√°lculo de estad√≠sticas locales
- Formateo de rangos de tiempo legibles

SISTEMA DE CACHE:
- Cache inteligente con timeout de 2 minutos
- Invalidaci√≥n autom√°tica despu√©s de cambios
- M√©todos con cache para operaciones frecuentes
- Reducci√≥n de peticiones repetidas al servidor

MANEJO DE ERRORES:
- Errores espec√≠ficos por tipo de operaci√≥n
- Fallbacks para endpoints no disponibles
- Manejo de usuarios sin membres√≠a
- Respuestas con informaci√≥n de conflictos

INTEGRACI√ìN:
- Extiende BaseService para funcionalidad HTTP b√°sica
- Compatible con sistema de autenticaci√≥n existente
- Integrable con React Query para estado global
- Soporte para componentes de UI especializados

Este servicio es esencial para la experiencia de gesti√≥n de horarios de clientes,
proporcionando una interfaz robusta y eficiente para todas las operaciones
relacionadas con la reserva y administraci√≥n de slots de tiempo en el gimnasio.
*/