/*
Autor: Alexander Echeverria
src/services/membershipService.js
ACTUALIZADO: Con gesti√≥n completa de horarios para clientes
*/

import apiService from './apiService';

class MembershipService {
  
  // ================================
  // üé´ M√âTODOS DE MEMBRES√çAS EXISTENTES
  // ================================
  
  // PASO 1: Obtener planes de membres√≠a disponibles - ENDPOINT QUE FUNCIONA
  async getPlans() {
    try {
      console.log('Obteniendo planes de membres√≠a...');
      
      // ENDPOINT QUE FUNCION√ì EN EL TEST: GET /api/memberships/purchase/plans
      const response = await apiService.get('/api/memberships/purchase/plans');
      
      console.log('Respuesta de planes:', response);
      
      if (response?.success && response.data?.plans) {
        const plans = response.data.plans;
        console.log('Planes obtenidos exitosamente:', plans.length);
        return plans;
      }
      
      throw new Error('Formato de respuesta inv√°lido');
      
    } catch (error) {
      console.error('Error obteniendo planes:', error);
      throw error;
    }
  }
  
  // PASO 2: Obtener horarios disponibles para un plan espec√≠fico
  async getScheduleOptions(planId) {
    try {
      console.log(`Obteniendo horarios para plan ${planId}...`);
      
      // ENDPOINT QUE FUNCION√ì: GET /api/memberships/plans/:id/schedule-options
      const response = await apiService.get(`/api/memberships/plans/${planId}/schedule-options`);
      
      if (response?.success && response.data) {
        return {
          availableOptions: response.data.availableOptions,
          plan: response.data.plan
        };
      }
      
      throw new Error('Error obteniendo horarios disponibles');
      
    } catch (error) {
      console.error('Error obteniendo horarios:', error);
      throw error;
    }
  }
  
  // PASO 3: Verificar disponibilidad de horarios seleccionados
  async checkScheduleAvailability(planId, selectedSchedule) {
    try {
      console.log('Verificando disponibilidad de horarios...');
      
      // ENDPOINT QUE FUNCION√ì: POST /api/memberships/purchase/check-availability
      const response = await apiService.post('/api/memberships/purchase/check-availability', {
        planId,
        selectedSchedule
      });
      
      if (response?.success && response.data) {
        return {
          canPurchase: response.data.canPurchase,
          availability: response.data.availability,
          conflicts: response.data.conflicts || []
        };
      }
      
      throw new Error('Error verificando disponibilidad');
      
    } catch (error) {
      console.error('Error verificando disponibilidad:', error);
      throw error;
    }
  }
  
  // FLUJO STRIPE: Verificar configuraci√≥n (sin datos de prueba)
  async checkStripeConfig() {
    try {
      console.log('Verificando configuraci√≥n de Stripe...');
      
      const response = await apiService.get('/api/stripe/config');
      
      if (response?.data?.stripe) {
        return {
          enabled: response.data.stripe.enabled,
          publishableKey: response.data.stripe.publishableKey,
          currency: response.data.stripe.currency
        };
      }
      
      return { enabled: false };
      
    } catch (error) {
      console.error('Error verificando Stripe:', error);
      return { enabled: false };
    }
  }
  
  // FLUJO STRIPE: Crear Payment Intent para membres√≠a - ENDPOINT QUE FUNCIONA
  async createMembershipPaymentIntent(planId, selectedSchedule, userId) {
    try {
      console.log('Creando Payment Intent para membres√≠a...');
      
      const payload = {
        planId,
        selectedSchedule,
        userId
      };
      
      console.log('Payload Payment Intent:', payload);
      
      // ENDPOINT QUE FUNCION√ì: POST /api/stripe/create-membership-purchase-intent
      const response = await apiService.post('/api/stripe/create-membership-purchase-intent', payload);
      
      console.log('Respuesta Payment Intent:', response);
      
      if (response?.success && response.data) {
        return {
          clientSecret: response.data.clientSecret,
          paymentIntentId: response.data.paymentIntentId,
          amount: response.data.amount,
          currency: response.data.currency
        };
      }
      
      throw new Error(response?.message || 'Error creando Payment Intent');
      
    } catch (error) {
      console.error('Error creando Payment Intent:', error);
      throw error;
    }
  }
  
  // FLUJO PRINCIPAL: Comprar membres√≠a - ENDPOINT QUE FUNCIONA
  async purchaseMembership(planId, selectedSchedule, paymentMethod, notes = '') {
    try {
      console.log('Comprando membres√≠a...');
      
      const payload = {
        planId,
        selectedSchedule,
        paymentMethod,
        notes
      };
      
      console.log('Payload compra:', payload);
      
      // ENDPOINT QUE FUNCION√ì: POST /api/memberships/purchase
      const response = await apiService.post('/api/memberships/purchase', payload);
      
      console.log('Respuesta compra:', response);
      
      if (response?.success && response.data) {
        return {
          membership: response.data.membership,
          payment: response.data.payment,
          plan: response.data.plan,
          user: response.data.user
        };
      }
      
      throw new Error(response?.message || 'Error comprando membres√≠a');
      
    } catch (error) {
      console.error('Error comprando membres√≠a:', error);
      throw error;
    }
  }
  
  // FLUJO TRANSFERENCIA: Subir comprobante
  async uploadTransferProof(paymentId, proofFile) {
    try {
      console.log('Subiendo comprobante de transferencia...');
      
      const formData = new FormData();
      formData.append('proof', proofFile);
      
      const response = await apiService.post(
        `/api/payments/${paymentId}/transfer-proof`, 
        formData,
        {
          headers: {
            'Content-Type': 'multipart/form-data'
          }
        }
      );
      
      if (response?.success) {
        return response.data;
      }
      
      throw new Error(response?.message || 'Error subiendo comprobante');
      
    } catch (error) {
      console.error('Error subiendo comprobante:', error);
      throw error;
    }
  }
  
  // OBTENER: Membres√≠a actual del usuario
  async getCurrentMembership() {
    try {
      console.log('Obteniendo membres√≠a actual del usuario...');
      
      const response = await apiService.get('/api/memberships/my-current');
      
      if (response?.success && response.data?.membership) {
        return response.data.membership;
      }
      
      return null;
      
    } catch (error) {
      console.error('Error obteniendo membres√≠a actual:', error);
      if (error.response?.status === 404) {
        return null;
      }
      throw error;
    }
  }
  
  // OBTENER: Membres√≠as del usuario
  async getUserMemberships() {
    try {
      console.log('Obteniendo membres√≠as del usuario...');
      
      const response = await apiService.get('/api/memberships');
      
      if (response?.success && response.data?.memberships) {
        return response.data.memberships.map(membership => ({
          id: membership.id,
          type: membership.type,
          status: membership.status,
          startDate: membership.startDate,
          endDate: membership.endDate,
          price: membership.price,
          autoRenew: membership.autoRenew,
          daysUntilExpiry: this.calculateDaysUntilExpiry(membership.endDate),
          plan: membership.plan,
          schedule: membership.schedule,
          summary: membership.summary
        }));
      }
      
      throw new Error(response?.message || 'Error obteniendo membres√≠as del usuario');
      
    } catch (error) {
      console.error('Error obteniendo membres√≠as del usuario:', error);
      throw error;
    }
  }
  
  // VERIFICAR: Estado del pago
  async checkPaymentStatus(paymentId) {
    try {
      console.log('Verificando estado del pago...');
      
      const response = await apiService.get(`/api/payments/${paymentId}`);
      
      if (response?.success && response.data?.payment) {
        return {
          id: response.data.payment.id,
          status: response.data.payment.status,
          amount: response.data.payment.amount,
          paymentMethod: response.data.payment.paymentMethod,
          transferValidated: response.data.payment.transferValidated,
          validatedBy: response.data.payment.validatedBy,
          validatedAt: response.data.payment.validatedAt
        };
      }
      
      throw new Error(response?.message || 'Error verificando estado del pago');
      
    } catch (error) {
      console.error('Error verificando estado del pago:', error);
      throw error;
    }
  }

  // ================================
  // üìÖ NUEVOS M√âTODOS DE GESTI√ìN DE HORARIOS
  // ================================

  // OBTENER: Horarios actuales del cliente
  async getCurrentSchedule() {
    try {
      console.log('üìÖ Obteniendo horarios actuales del cliente...');
      
      const response = await apiService.get('/api/memberships/my-schedule');
      
      if (response?.success && response.data) {
        console.log('‚úÖ Horarios actuales obtenidos:', response.data);
        return response.data;
      }
      
      throw new Error('Error obteniendo horarios actuales');
      
    } catch (error) {
      console.error('‚ùå Error obteniendo horarios actuales:', error);
      
      if (error.response?.status === 404) {
        // Usuario sin membres√≠a o sin horarios
        return {
          hasMembership: false,
          currentSchedule: {},
          membership: null
        };
      }
      
      throw error;
    }
  }

  // OBTENER: Opciones de horarios disponibles
  async getAvailableScheduleOptions(day = null) {
    try {
      console.log('üîç Obteniendo opciones de horarios disponibles...');
      
      const params = day ? { day } : {};
      const response = await apiService.get('/api/memberships/my-schedule/available-options', { params });
      
      if (response?.success && response.data) {
        console.log('‚úÖ Opciones disponibles obtenidas:', response.data);
        return response.data;
      }
      
      throw new Error('Error obteniendo opciones disponibles');
      
    } catch (error) {
      console.error('‚ùå Error obteniendo opciones disponibles:', error);
      throw error;
    }
  }

  // CAMBIAR: Horarios seleccionados del cliente
  async changeClientSchedule(changes) {
    try {
      console.log('‚úèÔ∏è Cambiando horarios del cliente...');
      console.log('üì§ Cambios a aplicar:', changes);
      
      // Validar cambios antes de enviar
      this.validateScheduleChanges(changes);
      
      // Determinar tipo de cambio
      const changeType = Object.keys(changes).length === 1 ? 
        'single_day' : 
        Object.keys(changes).length <= 3 ? 'multiple_days' : 'full_week';
      
      const payload = {
        changeType,
        changes
      };
      
      const response = await apiService.post('/api/memberships/my-schedule/change', payload);
      
      if (response?.success) {
        console.log('‚úÖ Horarios cambiados exitosamente:', response.data);
        return response.data;
      }
      
      throw new Error(response?.message || 'Error cambiando horarios');
      
    } catch (error) {
      console.error('‚ùå Error cambiando horarios:', error);
      
      // Manejo espec√≠fico de errores de disponibilidad
      if (error.response?.data?.unavailableSlots) {
        throw {
          ...error,
          unavailableSlots: error.response.data.unavailableSlots
        };
      }
      
      throw error;
    }
  }

  // CANCELAR: Horario espec√≠fico
  async cancelScheduleSlot(day, slotId) {
    try {
      console.log(`üóëÔ∏è Cancelando horario ${day}/${slotId}...`);
      
      const response = await apiService.delete(`/api/memberships/my-schedule/${day}/${slotId}`);
      
      if (response?.success) {
        console.log('‚úÖ Horario cancelado exitosamente');
        return response.data;
      }
      
      throw new Error(response?.message || 'Error cancelando horario');
      
    } catch (error) {
      console.error('‚ùå Error cancelando horario:', error);
      throw error;
    }
  }

  // OBTENER: Estad√≠sticas de horarios del cliente
  async getScheduleStats() {
    try {
      console.log('üìä Obteniendo estad√≠sticas de horarios...');
      
      const response = await apiService.get('/api/memberships/my-schedule/stats');
      
      if (response?.success && response.data) {
        console.log('‚úÖ Estad√≠sticas obtenidas:', response.data);
        return response.data;
      }
      
      throw new Error('Error obteniendo estad√≠sticas');
      
    } catch (error) {
      console.error('‚ùå Error obteniendo estad√≠sticas:', error);
      
      if (error.response?.status === 404) {
        // Fallback con estad√≠sticas vac√≠as
        return {
          totalSlots: 0,
          usedSlots: 0,
          availableSlots: 0,
          favoriteTime: null,
          totalVisits: 0
        };
      }
      
      throw error;
    }
  }

  // PREVISUALIZAR: Cambios de horarios antes de confirmar
  async previewScheduleChanges(changes) {
    try {
      console.log('üëÅÔ∏è Previsualizando cambios de horarios...');
      
      const response = await apiService.post('/api/memberships/my-schedule/preview-change', {
        changes
      });
      
      if (response?.success && response.data) {
        console.log('‚úÖ Vista previa generada:', response.data);
        return response.data;
      }
      
      throw new Error('Error generando vista previa');
      
    } catch (error) {
      console.error('‚ùå Error en vista previa:', error);
      throw error;
    }
  }

  // ================================
  // üõ†Ô∏è M√âTODOS HELPER Y VALIDACIONES
  // ================================
  
  // HELPER: Calcular d√≠as hasta vencimiento
  calculateDaysUntilExpiry(endDate) {
    if (!endDate) return null;
    
    const today = new Date();
    const expiry = new Date(endDate);
    const diffTime = expiry - today;
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    
    return diffDays;
  }

  // VALIDAR: Cambios de horarios
  validateScheduleChanges(changes) {
    if (!changes || typeof changes !== 'object') {
      throw new Error('Los cambios deben ser un objeto v√°lido');
    }

    if (Object.keys(changes).length === 0) {
      throw new Error('Debe especificar al menos un cambio');
    }

    const validDays = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'];
    
    for (const [day, slots] of Object.entries(changes)) {
      if (!validDays.includes(day)) {
        throw new Error(`D√≠a inv√°lido: ${day}`);
      }
      
      if (!Array.isArray(slots)) {
        throw new Error(`Los slots para ${day} deben ser un array`);
      }
      
      if (slots.length === 0) {
        throw new Error(`Debe especificar al menos un slot para ${day}`);
      }
    }

    return true;
  }

  // FORMATEAR: Horarios para visualizaci√≥n
  formatScheduleForDisplay(schedule) {
    if (!schedule || !schedule.currentSchedule) {
      return {};
    }

    const formatted = {};
    const dayNames = {
      monday: 'Lunes',
      tuesday: 'Martes', 
      wednesday: 'Mi√©rcoles',
      thursday: 'Jueves',
      friday: 'Viernes',
      saturday: 'S√°bado',
      sunday: 'Domingo'
    };

    for (const [day, dayData] of Object.entries(schedule.currentSchedule)) {
      formatted[day] = {
        ...dayData,
        dayName: dayNames[day] || day,
        formattedSlots: dayData.slots?.map(slot => ({
          ...slot,
          displayTime: this.formatTimeRange(slot.timeRange),
          isToday: this.isToday(day),
          isPast: this.isPastTime(slot.timeRange)
        })) || []
      };
    }

    return formatted;
  }

  // HELPER: Verificar si es el d√≠a actual
  isToday(day) {
    const today = new Date().toLocaleDateString('en-US', { weekday: 'long' }).toLowerCase();
    return day === today;
  }

  // HELPER: Verificar si el horario ya pas√≥
  isPastTime(timeRange) {
    if (!timeRange) return false;
    
    try {
      const now = new Date();
      const [startTime] = timeRange.split(' - ');
      const [hours, minutes] = startTime.split(':').map(Number);
      
      const slotTime = new Date();
      slotTime.setHours(hours, minutes, 0, 0);
      
      return now > slotTime;
    } catch (error) {
      return false;
    }
  }

  // HELPER: Formatear rango de tiempo
  formatTimeRange(timeRange) {
    if (!timeRange) return '';
    
    try {
      const [start, end] = timeRange.split(' - ');
      return `${this.formatTime(start)} - ${this.formatTime(end)}`;
    } catch (error) {
      return timeRange;
    }
  }

  // HELPER: Formatear tiempo individual
  formatTime(time) {
    if (!time) return '';
    
    try {
      const [hours, minutes] = time.split(':');
      const hour = parseInt(hours);
      const period = hour >= 12 ? 'PM' : 'AM';
      const displayHour = hour === 0 ? 12 : hour > 12 ? hour - 12 : hour;
      
      return `${displayHour}:${minutes} ${period}`;
    } catch (error) {
      return time;
    }
  }
  
  // HELPER: Selecci√≥n autom√°tica de horarios b√°sica
  autoSelectSchedule(availableOptions, planInfo) {
    const schedule = {};
    let totalReservations = 0;

    console.log('Selecci√≥n autom√°tica de horarios...');
    
    const priorityDays = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday'];
    const weekendDays = ['saturday', 'sunday'];
    
    // Llenar d√≠as laborales primero
    for (const day of priorityDays) {
      if (availableOptions[day] && 
          availableOptions[day].isOpen && 
          totalReservations < planInfo.maxReservationsPerWeek) {
        
        const availableSlots = availableOptions[day].slots.filter(slot => slot.canReserve);
        
        if (availableSlots.length > 0) {
          const slotsToSelect = Math.min(
            planInfo.maxSlotsPerDay, 
            availableSlots.length,
            planInfo.maxReservationsPerWeek - totalReservations
          );
          
          // Preferir horarios de ma√±ana
          const sortedSlots = availableSlots.sort((a, b) => a.openTime.localeCompare(b.openTime));
          schedule[day] = sortedSlots.slice(0, slotsToSelect).map(slot => slot.id);
          totalReservations += slotsToSelect;
        }
      }
    }
    
    // Agregar fines de semana si hay espacio
    if (totalReservations < planInfo.maxReservationsPerWeek) {
      for (const day of weekendDays) {
        if (availableOptions[day] && 
            availableOptions[day].isOpen && 
            totalReservations < planInfo.maxReservationsPerWeek) {
          
          const availableSlots = availableOptions[day].slots.filter(slot => slot.canReserve);
          
          if (availableSlots.length > 0) {
            const slotsToSelect = Math.min(
              planInfo.maxSlotsPerDay, 
              availableSlots.length,
              planInfo.maxReservationsPerWeek - totalReservations
            );
            
            schedule[day] = availableSlots.slice(0, slotsToSelect).map(slot => slot.id);
            totalReservations += slotsToSelect;
          }
        }
      }
    }

    console.log(`Horarios seleccionados autom√°ticamente: ${totalReservations} slots`);
    return schedule;
  }
  
  // POLLING: Seguimiento de estado de pago para transferencias y efectivo
  startPaymentStatusPolling(paymentId, onStatusChange, intervalMs = 30000, maxDuration = 600000) {
    console.log(`Iniciando polling para pago ${paymentId}...`);
    
    const pollInterval = setInterval(async () => {
      try {
        const status = await this.checkPaymentStatus(paymentId);
        
        if (status.status === 'completed') {
          clearInterval(pollInterval);
          onStatusChange({
            type: 'success',
            status: status,
            message: 'Pago aprobado! Tu membres√≠a ha sido activada.'
          });
        } else if (status.status === 'failed') {
          clearInterval(pollInterval);
          onStatusChange({
            type: 'error',
            status: status,
            message: 'Tu pago fue rechazado. Contacta soporte.'
          });
        } else {
          onStatusChange({
            type: 'pending',
            status: status,
            message: 'Pago a√∫n en validaci√≥n por nuestro equipo...'
          });
        }
      } catch (error) {
        console.error('Error en polling:', error);
        onStatusChange({
          type: 'error',
          error: error,
          message: 'Error verificando estado del pago'
        });
      }
    }, intervalMs);
    
    // Limpiar despu√©s del tiempo m√°ximo
    setTimeout(() => {
      clearInterval(pollInterval);
      console.log('Polling timeout alcanzado');
    }, maxDuration);
    
    return pollInterval;
  }
}

// Exportar instancia singleton
const membershipService = new MembershipService();
export default membershipService;

/*
=== ACTUALIZACIONES PARA GESTI√ìN DE HORARIOS ===

NUEVOS M√âTODOS AGREGADOS:
- getCurrentSchedule(): Obtener horarios actuales del cliente
- getAvailableScheduleOptions(): Ver opciones de horarios disponibles
- changeClientSchedule(): Modificar horarios con validaci√≥n
- cancelScheduleSlot(): Cancelar horario espec√≠fico
- getScheduleStats(): Estad√≠sticas de uso de horarios
- previewScheduleChanges(): Vista previa antes de confirmar
- validateScheduleChanges(): Validaci√≥n de cambios
- formatScheduleForDisplay(): Formateo para UI

ENDPOINTS UTILIZADOS:
- GET /api/memberships/my-schedule: Horarios actuales
- GET /api/memberships/my-schedule/available-options: Opciones disponibles
- POST /api/memberships/my-schedule/change: Cambiar horarios
- DELETE /api/memberships/my-schedule/{day}/{slotId}: Cancelar slot
- GET /api/memberships/my-schedule/stats: Estad√≠sticas
- POST /api/memberships/my-schedule/preview-change: Vista previa

FUNCIONALIDADES AGREGADAS:
- Gesti√≥n completa de horarios de clientes
- Validaci√≥n de disponibilidad en tiempo real
- Sistema de vista previa de cambios
- Formateo de horarios para visualizaci√≥n
- C√°lculo de estad√≠sticas locales
- Manejo de errores espec√≠ficos
- Helpers para formato de tiempo y d√≠as

INTEGRACI√ìN CON MEMBRES√çAS:
- Los m√©todos de horarios se integran con el sistema de membres√≠as existente
- Validaci√≥n de estado de membres√≠a antes de operaciones
- Consistencia con el flujo de adquisici√≥n de membres√≠as
- Reutilizaci√≥n de helpers y validaciones existentes

Esta actualizaci√≥n mantiene toda la funcionalidad original del servicio de membres√≠as
y agrega capacidades completas de gesti√≥n de horarios para clientes con membres√≠a activa.
*/

/*
=== ACTUALIZACIONES PARA PRODUCCI√ìN ===

ENDPOINTS UTILIZADOS (QUE FUNCIONARON EN EL TEST):
- GET /api/memberships/purchase/plans: Obtener planes disponibles
- GET /api/memberships/plans/:id/schedule-options: Obtener horarios de un plan
- POST /api/memberships/purchase/check-availability: Verificar disponibilidad
- POST /api/stripe/create-membership-purchase-intent: Crear Payment Intent
- POST /api/memberships/purchase: Comprar membres√≠a (endpoint principal)
- POST /api/payments/:id/transfer-proof: Subir comprobante transferencia
- GET /api/memberships/my-current: Obtener membres√≠a actual
- GET /api/payments/:id: Verificar estado de pago

M√âTODOS DE PAGO SOPORTADOS:
1. Tarjeta (card): 
   - Confirmaci√≥n inmediata con Stripe
   - Sin datos de prueba en producci√≥n
   
2. Transferencia (transfer):
   - Requiere validaci√≥n manual por admin
   - Sistema de polling para seguimiento
   - Upload de comprobante opcional
   
3. Efectivo (cash):
   - Pago en el gimnasio
   - Requiere confirmaci√≥n por colaboradores
   - Sistema de seguimiento hasta aprobaci√≥n

FLUJO COMPLETO:
1. Obtener planes disponibles
2. Seleccionar plan y obtener horarios
3. Usuario selecciona horarios deseados
4. Verificar disponibilidad de horarios
5. Para tarjeta: crear Payment Intent
6. Ejecutar compra con m√©todo seleccionado
7. Para transferencia/efectivo: seguimiento hasta aprobaci√≥n

CARACTER√çSTICAS PRODUCCI√ìN:
- Sin datos de prueba de Stripe
- Manejo robusto de errores
- Polling inteligente para pagos pendientes
- Validaci√≥n de disponibilidad en tiempo real
- Soporte completo para horarios/schedules
*/

/*
=== COMENTARIOS FINALES ===

PROPOSITO DEL ARCHIVO:
Este MembershipService es el servicio principal para la gesti√≥n completa de membres√≠as
del gimnasio Elite Fitness. Maneja todo el flujo de adquisici√≥n de membres√≠as desde la
consulta de planes disponibles hasta la confirmaci√≥n de pagos, soportando tanto pagos
con tarjeta (Stripe) como transferencias bancarias con validaci√≥n manual.

FUNCIONALIDAD PRINCIPAL:
- Obtenci√≥n de planes de membres√≠a disponibles desde el backend
- Verificaci√≥n y configuraci√≥n de integraci√≥n con Stripe para pagos con tarjeta
- Creaci√≥n de Payment Intents de Stripe para procesamiento seguro de pagos
- Gesti√≥n completa del flujo de transferencias bancarias
- Subida y validaci√≥n de comprobantes de transferencia
- Seguimiento en tiempo real del estado de pagos
- Obtenci√≥n de membres√≠as activas del usuario
- C√°lculo autom√°tico de d√≠as hasta vencimiento
- Sistema de polling para monitoreo de pagos pendientes

ARCHIVOS A LOS QUE SE CONECTA:
- ./apiService: Servicio principal de API para todas las peticiones HTTP
- Componentes de adquisici√≥n de membres√≠as en la UI
- Contextos de autenticaci√≥n para informaci√≥n del usuario
- P√°ginas de checkout y proceso de pago
- Dashboard de usuario para ver membres√≠as activas
- Componentes de administraci√≥n para validar transferencias

ENDPOINTS DEL BACKEND UTILIZADOS:
- GET /api/memberships/plans: Obtener planes disponibles
- GET /api/stripe/config: Verificar configuraci√≥n de Stripe
- POST /api/stripe/create-membership-intent: Crear intenci√≥n de pago
- POST /api/stripe/confirm-payment: Confirmar pago procesado
- POST /api/payments: Crear pago por transferencia
- POST /api/payments/:id/transfer-proof: Subir comprobante
- GET /api/payments/:id: Verificar estado de pago
- GET /api/memberships: Obtener membres√≠as del usuario

FLUJOS DE PAGO SOPORTADOS:
1. Pago con Stripe (tarjeta de cr√©dito/d√©bito):
   - Verificar configuraci√≥n de Stripe
   - Crear Payment Intent con datos de membres√≠a
   - Procesar pago en frontend con Stripe Elements
   - Confirmar pago exitoso en backend
   - Activar membres√≠a autom√°ticamente

2. Pago por transferencia bancaria:
   - Crear registro de pago pendiente
   - Usuario sube comprobante de transferencia
   - Sistema de polling para monitoreo autom√°tico
   - Validaci√≥n manual por administradores
   - Activaci√≥n de membres√≠a tras aprobaci√≥n

TIPOS DE MEMBRESIAS GESTIONADAS:
- Membres√≠as mensuales, trimestrales, semestrales y anuales
- Planes con diferentes niveles de acceso y beneficios
- Membres√≠as con renovaci√≥n autom√°tica opcional
- Gesti√≥n de fechas de inicio y vencimiento
- C√°lculo autom√°tico de d√≠as restantes

ESTADOS DE PAGO MANEJADOS:
- Pending: Pago creado pero no procesado
- Processing: Pago en proceso de validaci√≥n
- Completed: Pago aprobado y membres√≠a activada
- Failed: Pago rechazado o fall√≥
- Cancelled: Pago cancelado por el usuario

BENEFICIOS PARA EL USUARIO FINAL:
- Proceso de compra de membres√≠a simple y seguro
- M√∫ltiples opciones de pago (tarjeta y transferencia)
- Confirmaci√≥n inmediata para pagos con tarjeta
- Seguimiento autom√°tico del estado de transferencias
- Visualizaci√≥n clara de membres√≠as activas y fechas
- Notificaciones de vencimiento pr√≥ximo
- Renovaci√≥n autom√°tica opcional para conveniencia
- Proceso transparente con actualizaciones en tiempo real

FUNCIONALIDADES ADMINISTRATIVAS:
- Validaci√≥n manual de comprobantes de transferencia
- Seguimiento de todos los pagos en el sistema
- Gesti√≥n de planes y precios de membres√≠as
- Reportes de ingresos por membres√≠as
- Control de accesos seg√∫n tipo de membres√≠a

SEGURIDAD Y VALIDACIONES:
- Integraci√≥n segura con Stripe para pagos con tarjeta
- Validaci√≥n de comprobantes de transferencia por staff
- Verificaci√≥n de integridad de datos de pago
- Manejo seguro de informaci√≥n financiera sensible
- Logging detallado para auditor√≠as

EXPERIENCIA OPTIMIZADA:
- Proceso de checkout optimizado para conversi√≥n
- Retroalimentaci√≥n inmediata sobre estado de pagos
- Manejo elegante de errores con mensajes claros
- Sistema de polling no intrusivo para actualizaciones
- Interfaz responsive para compra desde m√≥vil

Este servicio es fundamental para la monetizaci√≥n del gimnasio y la experiencia
de adquisici√≥n de membres√≠as, proporcionando un sistema robusto, seguro y f√°cil
de usar tanto para clientes como para administradores.
*/