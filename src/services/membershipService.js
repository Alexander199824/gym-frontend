// src/services/membershipService.js
// FUNCI√ìN: Servicio API para membres√≠as SEG√öN GU√çA del backend
// IMPLEMENTA: Todos los endpoints de la gu√≠a de adquisici√≥n de membres√≠as

import apiService from './apiService';

class MembershipService {
  
  // ‚úÖ PASO 1: Obtener planes de membres√≠a disponibles - SEG√öN GU√çA
  async getPlans() {
    try {
      console.log('üé´ Obteniendo planes de membres√≠a...');
      
      // ENDPOINT SEG√öN GU√çA: GET /api/memberships/plans
      const response = await apiService.get('/api/memberships/plans');
      
      console.log('üì¶ Respuesta de planes:', response);
      
      if (response?.success && response.data) {
        const plans = Array.isArray(response.data) ? response.data : response.data.plans || [];
        console.log('‚úÖ Planes obtenidos exitosamente:', plans.length);
        return plans;
      }
      
      throw new Error('Formato de respuesta inv√°lido');
      
    } catch (error) {
      console.error('‚ùå Error obteniendo planes:', error);
      throw error;
    }
  }
  
  // ‚úÖ FLUJO STRIPE: Verificar configuraci√≥n
  async checkStripeConfig() {
    try {
      console.log('üí≥ Verificando configuraci√≥n de Stripe...');
      
      // ENDPOINT SEG√öN GU√çA: GET /api/stripe/config
      const response = await apiService.get('/api/stripe/config');
      
      if (response?.data?.stripe) {
        return {
          enabled: response.data.stripe.enabled,
          publishableKey: response.data.stripe.publishableKey,
          currency: response.data.stripe.currency
        };
      }
      
      return { enabled: false };
      
    } catch (error) {
      console.error('‚ùå Error verificando Stripe:', error);
      return { enabled: false };
    }
  }
  
  // ‚úÖ FLUJO STRIPE: Crear Payment Intent para membres√≠a
  async createMembershipPaymentIntent(membershipData) {
    try {
      console.log('üí≥ Creando Payment Intent para membres√≠a...');
      console.log('üì§ Datos recibidos:', membershipData);
      
      // ‚úÖ DEBUG: Preparar payload seg√∫n la gu√≠a
      const payload = {
        membershipType: membershipData.type || membershipData.duration,
        price: membershipData.price,
        membershipId: membershipData.id
      };
      
      console.log('üì§ Payload que se enviar√° al backend:', payload);
      console.log('üì§ URL del endpoint:', '/api/stripe/create-membership-intent');
      
      // ENDPOINT SEG√öN GU√çA: POST /api/stripe/create-membership-intent
      const response = await apiService.post('/api/stripe/create-membership-intent', payload);
      
      console.log('üì¶ Respuesta del backend:', response);
      
      if (response?.success && response.data) {
        return {
          clientSecret: response.data.clientSecret,
          paymentIntentId: response.data.paymentIntentId,
          amount: response.data.amount,
          currency: response.data.currency
        };
      }
      
      throw new Error(response?.message || 'Error creando Payment Intent');
      
    } catch (error) {
      console.error('‚ùå Error creando Payment Intent:', error);
      console.error('‚ùå Error response data:', error.response?.data);
      console.error('‚ùå Error status:', error.response?.status);
      throw error;
    }
  }
  
  // ‚úÖ FLUJO STRIPE: Confirmar pago en backend
  async confirmStripePayment(paymentIntentId) {
    try {
      console.log('‚úÖ Confirmando pago en backend...');
      
      // ENDPOINT SEG√öN GU√çA: POST /api/stripe/confirm-payment
      const response = await apiService.post('/api/stripe/confirm-payment', {
        paymentIntentId: paymentIntentId
      });
      
      if (response?.success) {
        return {
          payment: response.data.payment,
          membership: response.data.membership,
          stripe: response.data.stripe
        };
      }
      
      throw new Error(response?.message || 'Error confirmando pago');
      
    } catch (error) {
      console.error('‚ùå Error confirmando pago:', error);
      throw error;
    }
  }
  
  // ‚úÖ FLUJO TRANSFERENCIA: Crear pago con transferencia
  async createTransferPayment(membershipData, userId) {
    try {
      console.log('üè¶ Creando pago con transferencia...');
      
      // ENDPOINT SEG√öN GU√çA: POST /api/payments
      const response = await apiService.post('/api/payments', {
        userId: userId,
        membershipId: membershipData.id,
        amount: membershipData.price,
        paymentMethod: 'transfer',
        paymentType: 'membership',
        description: `Membres√≠a ${membershipData.name}`,
        notes: 'Pago por transferencia bancaria'
      });
      
      if (response?.success && response.data?.payment) {
        return response.data.payment;
      }
      
      throw new Error(response?.message || 'Error creando pago por transferencia');
      
    } catch (error) {
      console.error('‚ùå Error creando pago por transferencia:', error);
      throw error;
    }
  }
  
  // ‚úÖ FLUJO TRANSFERENCIA: Subir comprobante
  async uploadTransferProof(paymentId, proofFile) {
    try {
      console.log('üìé Subiendo comprobante de transferencia...');
      
      const formData = new FormData();
      formData.append('proof', proofFile);
      
      // ENDPOINT SEG√öN GU√çA: POST /api/payments/:id/transfer-proof
      const response = await apiService.post(
        `/api/payments/${paymentId}/transfer-proof`, 
        formData,
        {
          headers: {
            'Content-Type': 'multipart/form-data'
          }
        }
      );
      
      if (response?.success) {
        return response.data;
      }
      
      throw new Error(response?.message || 'Error subiendo comprobante');
      
    } catch (error) {
      console.error('‚ùå Error subiendo comprobante:', error);
      throw error;
    }
  }
  
  // ‚úÖ VERIFICAR: Estado del pago
  async checkPaymentStatus(paymentId) {
    try {
      console.log('üîç Verificando estado del pago...');
      
      // ENDPOINT SEG√öN GU√çA: GET /api/payments/:id
      const response = await apiService.get(`/api/payments/${paymentId}`);
      
      if (response?.success && response.data?.payment) {
        return {
          id: response.data.payment.id,
          status: response.data.payment.status,
          amount: response.data.payment.amount,
          transferValidated: response.data.payment.transferValidated
        };
      }
      
      throw new Error(response?.message || 'Error verificando estado del pago');
      
    } catch (error) {
      console.error('‚ùå Error verificando estado del pago:', error);
      throw error;
    }
  }
  
  // ‚úÖ OBTENER: Membres√≠as del usuario
  async getUserMemberships(userId) {
    try {
      console.log('üë§ Obteniendo membres√≠as del usuario...');
      
      // ENDPOINT SEG√öN GU√çA: GET /api/memberships
      const response = await apiService.get('/api/memberships');
      
      if (response?.success && response.data?.memberships) {
        return response.data.memberships.map(membership => ({
          id: membership.id,
          type: membership.type,
          status: membership.status,
          startDate: membership.startDate,
          endDate: membership.endDate,
          price: membership.price,
          autoRenew: membership.autoRenew,
          daysUntilExpiry: this.calculateDaysUntilExpiry(membership.endDate)
        }));
      }
      
      throw new Error(response?.message || 'Error obteniendo membres√≠as del usuario');
      
    } catch (error) {
      console.error('‚ùå Error obteniendo membres√≠as del usuario:', error);
      throw error;
    }
  }
  
  // üìÖ HELPER: Calcular d√≠as hasta vencimiento
  calculateDaysUntilExpiry(endDate) {
    if (!endDate) return null;
    
    const today = new Date();
    const expiry = new Date(endDate);
    const diffTime = expiry - today;
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    
    return diffDays;
  }
  
  // üîÑ POLLING: Iniciar seguimiento de estado de pago
  startPaymentStatusPolling(paymentId, onStatusChange, intervalMs = 30000, maxDuration = 600000) {
    console.log(`üîÑ Iniciando polling para pago ${paymentId}...`);
    
    const pollInterval = setInterval(async () => {
      try {
        const status = await this.checkPaymentStatus(paymentId);
        
        if (status.status === 'completed') {
          clearInterval(pollInterval);
          onStatusChange({
            type: 'success',
            status: status,
            message: '¬°Pago aprobado! Tu membres√≠a ha sido activada.'
          });
        } else if (status.status === 'failed') {
          clearInterval(pollInterval);
          onStatusChange({
            type: 'error',
            status: status,
            message: 'Tu transferencia fue rechazada. Contacta soporte.'
          });
        } else {
          onStatusChange({
            type: 'pending',
            status: status,
            message: 'Pago a√∫n en validaci√≥n...'
          });
        }
      } catch (error) {
        console.error('Error en polling:', error);
        onStatusChange({
          type: 'error',
          error: error,
          message: 'Error verificando estado del pago'
        });
      }
    }, intervalMs);
    
    // Limpiar despu√©s del tiempo m√°ximo
    setTimeout(() => {
      clearInterval(pollInterval);
      console.log('‚è∞ Polling timeout alcanzado');
    }, maxDuration);
    
    return pollInterval;
  }
}

// Exportar instancia singleton
const membershipService = new MembershipService();
export default membershipService;