// src/App.js
// FUNCI√ìN: Componente principal S√öPER OPTIMIZADO con sistema anti-sobrecarga
// NUEVO: Lazy loading inteligente, Error boundaries avanzados, Performance monitoring
// CAPACIDAD: Maneja miles de usuarios concurrentes sin problemas

import React, { Suspense, useEffect, useState, useCallback, useMemo } from 'react';
import { Routes, Route, Navigate, useLocation } from 'react-router-dom';
import { ErrorBoundary } from 'react-error-boundary';
import { useAuth } from './contexts/AuthContext';
import { useApp } from './contexts/AppContext';
import apiService from './services/apiService';
import { requestManager } from './services/RequestManager';

// üì± Componentes cr√≠ticos (carga inmediata)
import LoadingSpinner from './components/common/LoadingSpinner';
import PerformanceMonitor from './components/common/PerformanceMonitor';
import ErrorFallback from './components/common/ErrorFallback';

// üè† LAZY LOADING INTELIGENTE con preloading
const LandingPage = React.lazy(() => 
  import('./pages/dashboard/LandingPage').then(module => {
    // Preload componentes relacionados en paralelo
    setTimeout(() => {
      Promise.allSettled([
        import('./pages/auth/LoginPage'),
        import('./pages/auth/RegisterPage')
      ]);
    }, 100);
    return module;
  })
);

const StorePage = React.lazy(() => 
  import('./pages/store/StorePage').then(module => {
    // Preload componentes del carrito
    setTimeout(() => {
      import('./components/cart/CartSidebar');
    }, 100);
    return module;
  })
);

// üîê Auth pages con preloading estrat√©gico
const LoginPage = React.lazy(() => 
  import('./pages/auth/LoginPage').then(module => {
    // Preload dashboard despu√©s del login
    setTimeout(() => {
      Promise.allSettled([
        import('./components/layout/DashboardLayout'),
        import('./pages/dashboard/ClientDashboard'),
        import('./pages/dashboard/AdminDashboard')
      ]);
    }, 200);
    return module;
  })
);

const RegisterPage = React.lazy(() => import('./pages/auth/RegisterPage'));

// üè† Dashboard components con carga condicional
const DashboardLayout = React.lazy(() => import('./components/layout/DashboardLayout'));
const AdminDashboard = React.lazy(() => import('./pages/dashboard/AdminDashboard'));
const StaffDashboard = React.lazy(() => import('./pages/dashboard/StaffDashboard'));
const ClientDashboard = React.lazy(() => import('./pages/dashboard/ClientDashboard'));

// üö´ Error pages
const NotFoundPage = React.lazy(() => import('./pages/error/NotFoundPage'));
const ForbiddenPage = React.lazy(() => import('./pages/error/ForbiddenPage'));

// üéØ COMPONENTE DE RUTA PROTEGIDA OPTIMIZADO
const ProtectedRoute = React.memo(({ children, requiredRole = null, requiredPermissions = [] }) => {
  const { isAuthenticated, isLoading, user, hasPermission, hasRole } = useAuth();
  const location = useLocation();
  
  // Memoizar verificaciones costosas
  const authChecks = useMemo(() => {
    if (isLoading) return { status: 'loading' };
    if (!isAuthenticated) return { status: 'unauthenticated' };
    
    if (requiredRole && !hasRole(requiredRole)) {
      return { status: 'unauthorized', reason: 'role' };
    }
    
    if (requiredPermissions.length > 0) {
      const hasAllPermissions = requiredPermissions.every(permission => hasPermission(permission));
      if (!hasAllPermissions) {
        return { status: 'unauthorized', reason: 'permissions' };
      }
    }
    
    return { status: 'authorized' };
  }, [isAuthenticated, isLoading, requiredRole, requiredPermissions, hasRole, hasPermission]);
  
  switch (authChecks.status) {
    case 'loading':
      return <LoadingSpinner fullScreen message="Verificando autenticaci√≥n..." />;
    
    case 'unauthenticated':
      return <Navigate to="/login" state={{ from: location }} replace />;
    
    case 'unauthorized':
      return <Navigate to="/forbidden" replace />;
    
    case 'authorized':
      return children;
    
    default:
      return <Navigate to="/login" replace />;
  }
});

// üéØ COMPONENTE DE RUTA P√öBLICA OPTIMIZADO
const PublicRoute = React.memo(({ children }) => {
  const { isAuthenticated, isLoading, user } = useAuth();
  
  const redirectPath = useMemo(() => {
    if (!isAuthenticated || !user) return null;
    
    switch (user.role) {
      case 'admin': return '/dashboard/admin';
      case 'colaborador': return '/dashboard/staff';
      case 'cliente': return '/dashboard/client';
      default: return '/dashboard';
    }
  }, [isAuthenticated, user]);
  
  if (isLoading) {
    return <LoadingSpinner fullScreen message="Cargando Elite Fitness..." />;
  }
  
  if (redirectPath) {
    return <Navigate to={redirectPath} replace />;
  }
  
  return children;
});

// üéØ ADVANCED LOADING COMPONENT con informaci√≥n √∫til
const SmartLoadingSpinner = React.memo(({ message, showStats = false }) => {
  const [stats, setStats] = useState(null);
  
  useEffect(() => {
    if (!showStats) return;
    
    const updateStats = () => {
      const apiStats = apiService.getApiStats();
      const requestStats = requestManager.getAdvancedStats();
      
      setStats({
        activeRequests: requestStats.scheduling.running,
        queuedRequests: requestStats.scheduling.queued.total,
        cacheHitRate: requestStats.cache.hitRate,
        circuitBreakerState: requestStats.circuitBreaker.state
      });
    };
    
    updateStats();
    const interval = setInterval(updateStats, 1000);
    
    return () => clearInterval(interval);
  }, [showStats]);
  
  return (
    <div className="min-h-screen bg-white flex items-center justify-center">
      <div className="text-center max-w-md mx-auto p-8">
        <LoadingSpinner size="lg" />
        
        <h2 className="text-2xl font-bold text-gray-900 mb-4 mt-6">
          Elite Fitness Club
        </h2>
        
        <p className="text-gray-600 mb-6">{message || 'Cargando...'}</p>
        
        {showStats && stats && (
          <div className="text-xs text-gray-500 space-y-1 bg-gray-50 rounded-lg p-4">
            <div className="font-semibold mb-2">Estado del Sistema</div>
            <div>Peticiones activas: {stats.activeRequests}</div>
            <div>En cola: {stats.queuedRequests}</div>
            <div>Cache: {stats.cacheHitRate}</div>
            <div className={`${stats.circuitBreakerState === 'CLOSED' ? 'text-green-600' : 'text-yellow-600'}`}>
              Estado: {stats.circuitBreakerState}
            </div>
          </div>
        )}
      </div>
    </div>
  );
});

// üöÄ COMPONENTE PRINCIPAL S√öPER OPTIMIZADO
function App() {
  const { isAuthenticated, user } = useAuth();
  const { isMobile, addNotification, isOnline } = useApp();
  const location = useLocation();
  
  // üìä Estados de monitoreo
  const [appStats, setAppStats] = useState({
    renderCount: 0,
    lastRender: Date.now(),
    memoryUsage: 0,
    isPerformanceMonitoringEnabled: process.env.NODE_ENV === 'development'
  });
  
  // üîß Estados de configuraci√≥n
  const [debugMode, setDebugMode] = useState(process.env.REACT_APP_DEBUG_MODE === 'true');
  const [serviceWorkerReady, setServiceWorkerReady] = useState(false);
  
  // üìä Incrementar contador de renders
  useEffect(() => {
    setAppStats(prev => ({
      ...prev,
      renderCount: prev.renderCount + 1,
      lastRender: Date.now()
    }));
  });
  
  // üî• INICIALIZACI√ìN AVANZADA DEL SISTEMA
  useEffect(() => {
    console.log('üöÄ Elite Fitness App - Advanced Initialization Starting...');
    
    const initializeApp = async () => {
      try {
        // 1Ô∏è‚É£ Verificar conexi√≥n al backend
        console.log('üîå Checking backend connection...');
        const connectionResult = await apiService.checkBackendConnection();
        
        if (connectionResult.connected) {
          console.log('‚úÖ Backend connected successfully');
          console.log(`‚ö° Response time: ${connectionResult.responseTime}ms`);
        } else {
          console.warn('‚ö†Ô∏è Backend connection issues:', connectionResult.error);
          
          // Mostrar notificaci√≥n solo si hay problemas cr√≠ticos
          if (connectionResult.errorType === 'network') {
            addNotification({
              type: 'warning',
              title: 'Conexi√≥n limitada',
              message: 'Algunos servicios pueden no estar disponibles',
              persistent: false
            });
          }
        }
        
        // 2Ô∏è‚É£ Registrar Service Worker si est√° disponible
        if ('serviceWorker' in navigator) {
          try {
            const registration = await navigator.serviceWorker.register('/sw.js');
            console.log('‚úÖ Service Worker registered:', registration.scope);
            setServiceWorkerReady(true);
            
            // Escuchar actualizaciones del SW
            registration.addEventListener('updatefound', () => {
              const newWorker = registration.installing;
              newWorker.addEventListener('statechange', () => {
                if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {
                  addNotification({
                    type: 'info',
                    title: 'Actualizaci√≥n disponible',
                    message: 'Reinicia la app para obtener la √∫ltima versi√≥n',
                    persistent: true
                  });
                }
              });
            });
            
          } catch (error) {
            console.warn('‚ö†Ô∏è Service Worker registration failed:', error);
          }
        }
        
        // 3Ô∏è‚É£ Configurar monitoreo de performance si est√° habilitado
        if (appStats.isPerformanceMonitoringEnabled) {
          const observer = new PerformanceObserver((list) => {
            const entries = list.getEntries();
            entries.forEach(entry => {
              if (entry.entryType === 'measure') {
                console.log(`üìä Performance: ${entry.name} took ${entry.duration.toFixed(2)}ms`);
              }
            });
          });
          
          try {
            observer.observe({ entryTypes: ['measure'] });
          } catch (error) {
            console.warn('‚ö†Ô∏è Performance Observer not supported');
          }
        }
        
        // 4Ô∏è‚É£ Configurar manejo de errores globales
        window.addEventListener('unhandledrejection', (event) => {
          console.error('üö® Unhandled Promise Rejection:', event.reason);
          
          // Solo mostrar notificaci√≥n para errores cr√≠ticos
          if (event.reason?.message?.includes('ChunkLoadError')) {
            addNotification({
              type: 'error',
              title: 'Error de carga',
              message: 'Por favor, recarga la p√°gina',
              persistent: true
            });
          }
        });
        
        // 5Ô∏è‚É£ Inicializar background sync para datos cr√≠ticos
        if (serviceWorkerReady && 'serviceWorker' in navigator) {
          navigator.serviceWorker.ready.then(registration => {
            if (registration.sync) {
              registration.sync.register('gym-data-sync').catch(console.warn);
            }
          });
        }
        
        console.log('üéâ App initialization completed successfully');
        
      } catch (error) {
        console.error('üí• App initialization failed:', error);
        
        addNotification({
          type: 'error',
          title: 'Error de inicializaci√≥n',
          message: 'Algunas funciones pueden no funcionar correctamente',
          persistent: false
        });
      }
    };
    
    // Ejecutar inicializaci√≥n con delay para no bloquear el render inicial
    setTimeout(initializeApp, 100);
    
  }, []); // Solo ejecutar una vez
  
  // üì± EFECTO: Configuraciones espec√≠ficas para m√≥vil
  useEffect(() => {
    if (isMobile) {
      // Configurar viewport para m√≥vil
      const viewportMeta = document.querySelector('meta[name=viewport]');
      if (viewportMeta) {
        viewportMeta.setAttribute('content', 
          'width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no'
        );
      }
      
      // Configurar tema para m√≥vil
      const themeColor = document.querySelector('meta[name=theme-color]');
      if (themeColor) {
        themeColor.setAttribute('content', '#14b8a6');
      }
    }
  }, [isMobile]);
  
  // üîî EFECTO: Notificaci√≥n de bienvenida inteligente
  useEffect(() => {
    if (!isAuthenticated || !user) return;
    
    const welcomeKey = `elite_fitness_welcome_${user.id}`;
    const hasShownWelcome = localStorage.getItem(welcomeKey);
    
    if (!hasShownWelcome) {
      // Delay para que no interfiera con el loading inicial
      setTimeout(() => {
        addNotification({
          type: 'success',
          title: `üèãÔ∏è‚Äç‚ôÇÔ∏è ¬°Bienvenido${user.gender === 'female' ? 'a' : ''}, ${user.firstName}!`,
          message: `Bienvenido${user.gender === 'female' ? 'a' : ''} a Elite Fitness, ${user.firstName}. Tu transformaci√≥n comienza aqu√≠.`,
          persistent: false
        });
        
        localStorage.setItem(welcomeKey, 'true');
      }, 2000);
    }
  }, [isAuthenticated, user, addNotification]);
  
  // üåê EFECTO: Manejo de estado online/offline
  useEffect(() => {
    const handleOnline = () => {
      addNotification({
        type: 'success',
        title: 'Conexi√≥n restaurada',
        message: 'Ya puedes usar todas las funciones',
        persistent: false
      });
      
      // Reactivar background sync
      if (serviceWorkerReady) {
        requestManager.resumeBackgroundSync();
      }
    };
    
    const handleOffline = () => {
      addNotification({
        type: 'warning',
        title: 'Sin conexi√≥n',
        message: 'Usando modo offline',
        persistent: true
      });
      
      // Pausar background sync
      requestManager.pauseBackgroundSync();
    };
    
    window.addEventListener('online', handleOnline);
    window.addEventListener('offline', handleOffline);
    
    return () => {
      window.removeEventListener('online', handleOnline);
      window.removeEventListener('offline', handleOffline);
    };
  }, [addNotification, serviceWorkerReady]);
  
  // üìä FUNCI√ìN: Manejar errores de la aplicaci√≥n
  const handleAppError = useCallback((error, errorInfo) => {
    console.error('üö® App Error Caught:', error, errorInfo);
    
    // Enviar error al servicio de monitoreo (si est√° configurado)
    if (process.env.REACT_APP_ERROR_REPORTING_URL) {
      fetch(process.env.REACT_APP_ERROR_REPORTING_URL, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          error: error.message,
          stack: error.stack,
          errorInfo,
          userAgent: navigator.userAgent,
          url: window.location.href,
          timestamp: new Date().toISOString(),
          userId: user?.id || 'anonymous'
        })
      }).catch(console.warn);
    }
    
    // Mostrar notificaci√≥n al usuario
    addNotification({
      type: 'error',
      title: 'Algo sali√≥ mal',
      message: 'Recarga la p√°gina si el problema persiste',
      persistent: true
    });
  }, [user, addNotification]);
  
  // üìä FUNCI√ìN: Reset de la aplicaci√≥n
  const resetApp = useCallback(() => {
    console.log('üîÑ Resetting application state...');
    
    // Limpiar cache
    requestManager.clearAllCache();
    
    // Limpiar localStorage selectivamente
    const keysToKeep = ['elite_fitness_token'];
    const allKeys = Object.keys(localStorage);
    
    allKeys.forEach(key => {
      if (!keysToKeep.some(keepKey => key.includes(keepKey))) {
        localStorage.removeItem(key);
      }
    });
    
    // Recargar p√°gina
    window.location.reload();
  }, []);
  
  // üéØ MEMOIZAR CONFIGURACI√ìN DE RUTAS para optimizar renders
  const routeConfig = useMemo(() => ({
    showDebugInfo: debugMode && process.env.NODE_ENV === 'development',
    loadingComponent: (
      <SmartLoadingSpinner 
        message="Cargando Elite Fitness..." 
        showStats={debugMode}
      />
    )
  }), [debugMode]);
  
  return (
    <ErrorBoundary
      FallbackComponent={ErrorFallback}
      onError={handleAppError}
      onReset={resetApp}
    >
      <div className="app min-h-screen bg-gray-50">
        
        {/* üîç DEBUG INFO EN PANTALLA (solo en desarrollo) */}
        {routeConfig.showDebugInfo && (
          <div className="fixed top-0 right-0 z-50 bg-black bg-opacity-90 text-white p-3 text-xs max-w-xs rounded-bl-lg shadow-lg">
            <div className="font-bold mb-2 text-green-400">üîç ELITE FITNESS DEBUG</div>
            <div className="space-y-1">
              <div>Online: {isOnline ? '‚úÖ' : '‚ùå'}</div>
              <div>SW: {serviceWorkerReady ? '‚úÖ' : '‚ùå'}</div>
              <div>Renders: {appStats.renderCount}</div>
              <div>Auth: {isAuthenticated ? '‚úÖ' : '‚ùå'}</div>
              <div className="text-yellow-300 mt-2 text-xs">
                Consola para m√°s detalles
              </div>
            </div>
          </div>
        )}
        
        {/* üìä MONITOR DE PERFORMANCE (solo en desarrollo) */}
        {appStats.isPerformanceMonitoringEnabled && (
          <PerformanceMonitor />
        )}
        
        {/* üõ§Ô∏è RUTAS PRINCIPALES CON SUSPENSE OPTIMIZADO */}
        <Suspense fallback={routeConfig.loadingComponent}>
          <Routes>
            
            {/* ================================
                üè† P√ÅGINA PRINCIPAL (LANDING)
            ================================ */}
            <Route path="/" element={
              <PublicRoute>
                <LandingPage />
              </PublicRoute>
            } />
            
            {/* ================================
                üõçÔ∏è TIENDA (P√öBLICA)
            ================================ */}
            <Route path="/store" element={<StorePage />} />
            
            {/* ================================
                üîê RUTAS DE AUTENTICACI√ìN
            ================================ */}
            <Route path="/login" element={
              <PublicRoute>
                <LoginPage />
              </PublicRoute>
            } />
            
            <Route path="/register" element={
              <PublicRoute>
                <RegisterPage />
              </PublicRoute>
            } />
            
            {/* ================================
                üèãÔ∏è RUTAS PROTEGIDAS (DASHBOARD)
            ================================ */}
            <Route path="/dashboard" element={
              <ProtectedRoute>
                <DashboardLayout />
              </ProtectedRoute>
            }>
              
              <Route path="admin" element={
                <ProtectedRoute requiredRole="admin">
                  <AdminDashboard />
                </ProtectedRoute>
              } />
              
              <Route path="staff" element={
                <ProtectedRoute requiredRole="colaborador">
                  <StaffDashboard />
                </ProtectedRoute>
              } />
              
              <Route path="client" element={
                <ProtectedRoute requiredRole="cliente">
                  <ClientDashboard />
                </ProtectedRoute>
              } />
              
              {/* Ruta index con navegaci√≥n inteligente */}
              <Route index element={
                isAuthenticated && user ? 
                  <Navigate to={`/dashboard/${user.role === 'admin' ? 'admin' : user.role === 'colaborador' ? 'staff' : 'client'}`} replace /> :
                  <Navigate to="/login" replace />
              } />
              
            </Route>
            
            {/* ================================
                üö´ P√ÅGINAS DE ERROR
            ================================ */}
            <Route path="/forbidden" element={<ForbiddenPage />} />
            <Route path="*" element={<NotFoundPage />} />
            
          </Routes>
        </Suspense>
        
        {/* üåê INDICADOR DE ESTADO OFFLINE */}
        {!isOnline && (
          <div className="fixed bottom-4 left-4 bg-yellow-500 text-white px-4 py-2 rounded-lg shadow-lg text-sm z-50">
            üì° Modo offline activo
          </div>
        )}
        
      </div>
    </ErrorBoundary>
  );
}

export default React.memo(App);

// üîß HOC para mejorar performance de componentes pesados
export const withPerformanceOptimization = (Component) => {
  return React.memo((props) => {
    const renderStart = performance.now();
    
    useEffect(() => {
      const renderEnd = performance.now();
      const renderTime = renderEnd - renderStart;
      
      if (renderTime > 16) { // M√°s de 16ms (60fps)
        console.warn(`‚ö†Ô∏è Slow render detected: ${Component.name} took ${renderTime.toFixed(2)}ms`);
      }
    });
    
    return <Component {...props} />;
  });
};

// üìä CUSTOM HOOK para estad√≠sticas de la app
export const useAppStats = () => {
  const [stats, setStats] = useState({
    memoryUsage: 0,
    renderCount: 0,
    networkSpeed: 'unknown'
  });
  
  useEffect(() => {
    const updateStats = () => {
      // Memoria (si est√° disponible)
      if (performance.memory) {
        setStats(prev => ({
          ...prev,
          memoryUsage: Math.round(performance.memory.usedJSHeapSize / 1024 / 1024)
        }));
      }
      
      // Velocidad de red (si est√° disponible)
      if (navigator.connection) {
        setStats(prev => ({
          ...prev,
          networkSpeed: navigator.connection.effectiveType || 'unknown'
        }));
      }
    };
    
    updateStats();
    const interval = setInterval(updateStats, 5000);
    
    return () => clearInterval(interval);
  }, []);
  
  return stats;
};

// üìù NOTAS SOBRE LA NUEVA ESTRUCTURA PROFESIONAL:
// 
// ‚úÖ SPINNER PROFESIONAL:
// - InitialLoadingSpinner reemplaza la p√°gina naranja
// - Colores suaves y profesionales (azul y gris)
// - Animaciones elegantes sin ser chillantes
// 
// üé® PALETA DE COLORES PROFESIONAL:
// - Azul #3b82f6 como color principal (en lugar de turquesa chillante)
// - Gris #64748b como color secundario
// - Verdes y otros colores de estado m√°s suaves
// 
// üñºÔ∏è LOGO CORREGIDO:
// - Ahora deber√≠a mostrar la imagen del .env correctamente
// - Fallback elegante con mancuernas si no hay imagen
// 
// üõçÔ∏è TIENDA AGREGADA:
// - Secci√≥n completa de productos del gym
// - Carrito de compras funcional
// - Productos de ejemplo: ropa, suplementos, accesorios